{"id": "production.start_refinery.refinery.v1", "title": "Start refinery operation", "category": "production", "verb": "start_refinery", "natural_language_triggers": ["start refinery", "turn on refinery", "begin refining", "start processing", "enable refinery"], "targets": {"allowed_types": ["Refinery", "Basic Refinery"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_refinery"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_On"], "terminal_path": ["Terminal", "Refinery", "On/Off"], "modapi_calls": [{"interface": "IMyRefinery", "property": "Enabled", "method": "set_Enabled(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Refinery must exist", "Refinery must be functional", "Refinery must be powered", "Ores must be available in input inventory", "User must have control authority"], "effects": ["Refinery.Enabled = true", "Ore processing begins", "Ores consumed", "Ingots produced"], "constraints": {"power_required_mw": 0.56, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 2000, "instruction_cost": 15}, "validation_hooks": ["check_block_exists(target)", "check_block_type_refinery(target)", "check_block_functional(target)", "check_block_powered(target)", "check_ores_available(target)", "check_user_authority(target)"], "error_cases": [{"condition": "refinery_not_found", "message": "No refineries matching '{target}' found", "recovery": "List available refineries"}, {"condition": "refinery_unpowered", "message": "Refinery '{target}' has no power", "recovery": "Check power grid and connections"}, {"condition": "no_ores", "message": "No ores available for processing in '{target}'", "recovery": "Add ores to refinery input or connect to ore supply"}, {"condition": "refinery_not_functional", "message": "Refinery '{target}' is not functional", "recovery": "Check refinery condition and repair if needed"}, {"condition": "output_inventory_full", "message": "Refinery '{target}' output inventory is full", "recovery": "Empty output inventory or connect to conveyor system"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "start main refinery", "parsed": {"verb": "start_refinery", "target": {"name": "main refinery"}}}, {"input": "begin ore processing", "parsed": {"verb": "start_refinery", "target": {"type": "refinery", "selector": "all"}}}], "synonyms": ["turn on refinery", "begin refining", "start processing", "enable refinery"], "tags": ["production", "refinery", "processing", "start"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Production/IMyRefinery.md", "sections": ["Properties"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/Production/Refinerypart-001.md", "sections": ["Usage"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "production.stop_refinery.refinery.v1", "title": "Stop refinery operation", "category": "production", "verb": "stop_refinery", "natural_language_triggers": ["stop refinery", "turn off refinery", "halt refining", "stop processing", "disable refinery"], "targets": {"allowed_types": ["Refinery", "Basic Refinery"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_refinery"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_Off"], "terminal_path": ["Terminal", "Refinery", "On/Off"], "modapi_calls": [{"interface": "IMyRefinery", "property": "Enabled", "method": "set_Enabled(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Refinery must exist", "User must have control authority"], "effects": ["Refinery.Enabled = false", "Ore processing stops", "Current processing paused", "Power consumption reduced"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1000, "instruction_cost": 8}, "validation_hooks": ["check_block_exists(target)", "check_block_type_refinery(target)", "check_user_authority(target)"], "error_cases": [{"condition": "refinery_not_found", "message": "No refineries matching '{target}' found", "recovery": "List available refineries"}, {"condition": "refinery_already_off", "message": "Refinery '{target}' is already stopped", "recovery": "Refinery is not currently processing"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "stop backup refinery", "parsed": {"verb": "stop_refinery", "target": {"name": "backup refinery"}}}, {"input": "halt all ore processing", "parsed": {"verb": "stop_refinery", "target": {"type": "refinery", "selector": "all"}}}], "synonyms": ["turn off refinery", "halt refining", "stop processing", "disable refinery"], "tags": ["production", "refinery", "stop", "halt"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Production/IMyRefinery.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "production.add_ore_to_refinery.refinery.v1", "title": "Add ore to refinery input", "category": "production", "verb": "add_ore_to_refinery", "natural_language_triggers": ["add ore to refinery", "load ore", "refinery input", "feed refinery"], "targets": {"allowed_types": ["Refinery", "Basic Refinery"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_refinery"}, "parameters": [{"name": "ore_type", "type": "item_name", "required": true, "validation": "ore_item_exists", "description": "Type of ore to add"}, {"name": "amount", "type": "float", "required": false, "default": "all_available", "validation": "positive_number", "description": "Amount of ore to transfer"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Refinery", "Add Ore"], "modapi_calls": [{"interface": "IMyInventory", "method": "TransferItemTo(refinery.InputInventory, ore_type, amount)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": false}, "preconditions": ["Refinery must exist", "Refinery must be functional", "Ore must be available in connected containers", "Refinery input must have space", "User must have control authority"], "effects": ["Ore transferred to refinery input", "Processing queue updated", "Refining material available"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 2000, "instruction_cost": 15}, "validation_hooks": ["check_block_exists(target)", "check_block_type_refinery(target)", "check_block_functional(target)", "validate_ore_type(ore_type)", "check_ore_available_in_grid(ore_type, amount)", "check_refinery_input_space(target)", "check_user_authority(target)"], "error_cases": [{"condition": "refinery_not_found", "message": "No refineries matching '{target}' found", "recovery": "List available refineries"}, {"condition": "ore_not_available", "message": "Ore '{ore_type}' not available in connected containers", "recovery": "Check ore supply in cargo containers"}, {"condition": "refinery_input_full", "message": "Refinery '{target}' input inventory is full", "recovery": "Empty refinery input or wait for processing"}, {"condition": "invalid_ore_type", "message": "Invalid ore type '{ore_type}'", "recovery": "Use valid ore item name"}, {"condition": "ore_not_supported", "message": "Ore '{ore_type}' not supported by '{target}'", "recovery": "Basic refineries only process iron, nickel, silicon ores"}], "safety_class": "safe", "idempotent": false, "reversible": false, "examples": [{"input": "add iron ore to main refinery", "parsed": {"verb": "add_ore_to_refinery", "target": {"name": "main refinery"}, "parameters": {"ore_type": "Iron Ore"}}}, {"input": "load uranium ore 500", "parsed": {"verb": "add_ore_to_refinery", "target": {"type": "refinery"}, "parameters": {"ore_type": "Uranium Ore", "amount": 500}}}], "synonyms": ["load ore", "refinery input", "feed refinery"], "tags": ["production", "refinery", "ore", "input"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Production/IMyProductionBlockpart-001.md", "sections": ["Inventory Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "production.get_refinery_efficiency.refinery.v1", "title": "Get refinery processing efficiency", "category": "production", "verb": "get_refinery_efficiency", "natural_language_triggers": ["get refinery efficiency", "processing efficiency", "refinery performance", "how efficient"], "targets": {"allowed_types": ["Refinery", "Basic Refinery"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_refinery"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Refinery", "Efficiency"], "modapi_calls": [{"interface": "IMyRefinery", "method": "GetEfficiency()"}, {"interface": "IMyProductionBlock", "method": "GetUpgradeMultiplier()"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Refinery must exist", "User must have view authority"], "effects": ["Returns processing efficiency percentage", "Returns upgrade module effects", "Returns material yield rate", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_refinery(target)", "check_view_authority(target)"], "error_cases": [{"condition": "refinery_not_found", "message": "No refineries matching '{target}' found", "recovery": "List available refineries"}, {"condition": "efficiency_calculation_failed", "message": "Cannot calculate efficiency for '{target}'", "recovery": "Check refinery status and operation"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "check main refinery efficiency", "parsed": {"verb": "get_refinery_efficiency", "target": {"name": "main refinery"}}}, {"input": "how efficient are refineries", "parsed": {"verb": "get_refinery_efficiency", "target": {"type": "refinery", "selector": "all"}}}], "synonyms": ["processing efficiency", "refinery performance", "how efficient"], "tags": ["production", "monitoring", "efficiency", "performance"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Production/MyRefineryDefinition.md", "sections": ["Efficiency Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}