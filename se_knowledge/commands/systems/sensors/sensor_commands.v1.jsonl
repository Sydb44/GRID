{"id": "sensors.set_sensor_range.sensor.v1", "title": "Set sensor detection range", "category": "sensors", "verb": "set_sensor_range", "natural_language_triggers": ["set sensor range", "sensor range", "detection range", "sensor distance"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "front", "type": "float", "range": {"min": 0.1, "max": 50.0}, "units": "meters", "default": 25.0, "required": false, "validation": "sensor_range", "terminal_name": "Front Extend"}, {"name": "back", "type": "float", "range": {"min": 0.1, "max": 50.0}, "units": "meters", "default": 25.0, "required": false, "validation": "sensor_range", "terminal_name": "Back Extend"}, {"name": "left", "type": "float", "range": {"min": 0.1, "max": 50.0}, "units": "meters", "default": 25.0, "required": false, "validation": "sensor_range", "terminal_name": "Left Extend"}, {"name": "right", "type": "float", "range": {"min": 0.1, "max": 50.0}, "units": "meters", "default": 25.0, "required": false, "validation": "sensor_range", "terminal_name": "Right Extend"}, {"name": "top", "type": "float", "range": {"min": 0.1, "max": 50.0}, "units": "meters", "default": 25.0, "required": false, "validation": "sensor_range", "terminal_name": "Top Extend"}, {"name": "bottom", "type": "float", "range": {"min": 0.1, "max": 50.0}, "units": "meters", "default": 25.0, "required": false, "validation": "sensor_range", "terminal_name": "Bottom Extend"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Detection Range"], "modapi_calls": [{"interface": "IMySensorBlock", "property": "FrontExtend", "method": "set_FrontExtend(float)"}, {"interface": "IMySensorBlock", "property": "BackExtend", "method": "set_BackExtend(float)"}, {"interface": "IMySensorBlock", "property": "LeftExtend", "method": "set_LeftExtend(float)"}, {"interface": "IMySensorBlock", "property": "RightExtend", "method": "set_RightExtend(float)"}, {"interface": "IMySensorBlock", "property": "TopExtend", "method": "set_TopExtend(float)"}, {"interface": "IMySensorBlock", "property": "BottomExtend", "method": "set_BottomExtend(float)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Sensor must exist", "Sensor must be functional", "All range values must be valid", "User must have control authority"], "effects": ["Sensor detection range updated", "Detection field reshaped", "Trigger area defined"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 12}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "validate_sensor_ranges(front, back, left, right, top, bottom)", "check_user_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "range_out_of_bounds", "message": "Sensor range must be between 0.1m and 50m", "recovery": "Use range values between 0.1 and 50 meters"}, {"condition": "sensor_not_functional", "message": "Sensor '{target}' is not functional", "recovery": "Check sensor condition and power"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set airlock sensor range 5m all directions", "parsed": {"verb": "set_sensor_range", "target": {"name": "airlock sensor"}, "parameters": {"front": 5.0, "back": 5.0, "left": 5.0, "right": 5.0, "top": 5.0, "bottom": 5.0}}}, {"input": "sensor range front 10m back 2m", "parsed": {"verb": "set_sensor_range", "target": {"type": "sensor"}, "parameters": {"front": 10.0, "back": 2.0}}}], "synonyms": ["sensor range", "detection range", "sensor distance"], "tags": ["sensors", "detection", "range", "configuration"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Properties"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Range Setup"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "sensors.set_sensor_targets.sensor.v1", "title": "Set sensor detection targets", "category": "sensors", "verb": "set_sensor_targets", "natural_language_triggers": ["set sensor targets", "detect players", "sensor detection", "what to detect"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "detect_players", "type": "boolean", "required": false, "default": true, "validation": "boolean"}, {"name": "detect_friendly", "type": "boolean", "required": false, "default": true, "validation": "boolean"}, {"name": "detect_enemy", "type": "boolean", "required": false, "default": true, "validation": "boolean"}, {"name": "detect_neutral", "type": "boolean", "required": false, "default": false, "validation": "boolean"}, {"name": "detect_floating_objects", "type": "boolean", "required": false, "default": false, "validation": "boolean"}, {"name": "detect_small_ships", "type": "boolean", "required": false, "default": true, "validation": "boolean"}, {"name": "detect_large_ships", "type": "boolean", "required": false, "default": true, "validation": "boolean"}, {"name": "detect_stations", "type": "boolean", "required": false, "default": false, "validation": "boolean"}, {"name": "detect_subgrids", "type": "boolean", "required": false, "default": false, "validation": "boolean"}, {"name": "detect_asteroids", "type": "boolean", "required": false, "default": false, "validation": "boolean"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Detection Settings"], "modapi_calls": [{"interface": "IMySensorBlock", "property": "DetectPlayers", "method": "set_DetectPlayers(bool)"}, {"interface": "IMySensorBlock", "property": "DetectFriendly", "method": "set_DetectFriendly(bool)"}, {"interface": "IMySensorBlock", "property": "DetectEnemy", "method": "set_DetectEnemy(bool)"}, {"interface": "IMySensorBlock", "property": "DetectNeutral", "method": "set_DetectNeutral(bool)"}, {"interface": "IMySensorBlock", "property": "DetectFloatingObjects", "method": "set_DetectFloatingObjects(bool)"}, {"interface": "IMySensorBlock", "property": "DetectSmallShips", "method": "set_DetectSmallShips(bool)"}, {"interface": "IMySensorBlock", "property": "DetectLargeShips", "method": "set_DetectLargeShips(bool)"}, {"interface": "IMySensorBlock", "property": "DetectStations", "method": "set_DetectStations(bool)"}, {"interface": "IMySensorBlock", "property": "DetectSubgrids", "method": "set_DetectSubgrids(bool)"}, {"interface": "IMySensorBlock", "property": "DetectAsteroids", "method": "set_DetectAsteroids(bool)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Sensor must exist", "Sensor must be functional", "At least one detection type must be enabled", "User must have control authority"], "effects": ["Sensor detection targets updated", "Detection criteria configured", "Trigger conditions defined"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 15}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "validate_at_least_one_detection_type(parameters)", "check_user_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "no_detection_types", "message": "No detection types specified for '{target}'", "recovery": "Enable at least one detection type"}, {"condition": "invalid_detection_combination", "message": "Invalid detection combination for '{target}'", "recovery": "Check detection type compatibility"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set security sensor detect enemies only", "parsed": {"verb": "set_sensor_targets", "target": {"name": "security sensor"}, "parameters": {"detect_players": true, "detect_enemy": true, "detect_friendly": false, "detect_neutral": false}}}, {"input": "airlock sensor detect all players", "parsed": {"verb": "set_sensor_targets", "target": {"name": "airlock sensor"}, "parameters": {"detect_players": true, "detect_friendly": true, "detect_enemy": true, "detect_neutral": true}}}], "synonyms": ["detect players", "sensor detection", "what to detect"], "tags": ["sensors", "detection", "targeting", "configuration"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Detection Properties"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Detection Types"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "sensors.enable_sensor.sensor.v1", "title": "Enable sensor detection", "category": "sensors", "verb": "enable_sensor", "natural_language_triggers": ["enable sensor", "turn on sensor", "activate sensor", "sensor on"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_On"], "terminal_path": ["Terminal", "Sensor", "On/Off"], "modapi_calls": [{"interface": "IMySensorBlock", "property": "Enabled", "method": "set_Enabled(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Sensor must exist", "Sensor must be functional", "Sensor must be powered", "User must have control authority"], "effects": ["Sensor.Enabled = true", "Detection begins", "Configured actions ready to trigger", "Status light turns green"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "check_block_powered(target)", "check_user_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "sensor_unpowered", "message": "Sensor '{target}' has no power", "recovery": "Check power grid and connections"}, {"condition": "sensor_not_configured", "message": "Sensor '{target}' has no detection or actions configured", "recovery": "Configure detection settings and actions"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "enable airlock sensors", "parsed": {"verb": "enable_sensor", "target": {"name": "airlock sensors"}}}, {"input": "turn on all sensors", "parsed": {"verb": "enable_sensor", "target": {"type": "sensor", "selector": "all"}}}], "synonyms": ["turn on sensor", "activate sensor", "sensor on"], "tags": ["sensors", "detection", "enable", "automation"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Properties"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Operation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "sensors.disable_sensor.sensor.v1", "title": "Disable sensor detection", "category": "sensors", "verb": "disable_sensor", "natural_language_triggers": ["disable sensor", "turn off sensor", "deactivate sensor", "sensor off"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_Off"], "terminal_path": ["Terminal", "Sensor", "On/Off"], "modapi_calls": [{"interface": "IMySensorBlock", "property": "Enabled", "method": "set_Enabled(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Sensor must exist", "User must have control authority"], "effects": ["Sensor.Enabled = false", "Detection stops", "No actions triggered", "Status light turns red"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_user_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "disable security sensors", "parsed": {"verb": "disable_sensor", "target": {"name": "security sensors"}}}, {"input": "turn off all sensors", "parsed": {"verb": "disable_sensor", "target": {"type": "sensor", "selector": "all"}}}], "synonyms": ["turn off sensor", "deactivate sensor", "sensor off"], "tags": ["sensors", "detection", "disable", "stop"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "sensors.get_sensor_status.sensor.v1", "title": "Get sensor detection status", "category": "sensors", "verb": "get_sensor_status", "natural_language_triggers": ["get sensor status", "sensor status", "check sensor", "is sensor detecting", "sensor info"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Status"], "modapi_calls": [{"interface": "IMySensorBlock", "property": "IsActive", "method": "get_IsActive()"}, {"interface": "IMySensorBlock", "method": "GetDetectedEntities()"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensor must exist", "User must have view authority"], "effects": ["Returns sensor detection status", "Returns list of detected entities", "Returns configuration info", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_view_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "check airlock sensor status", "parsed": {"verb": "get_sensor_status", "target": {"name": "airlock sensor"}}}, {"input": "is perimeter sensor detecting", "parsed": {"verb": "get_sensor_status", "target": {"name": "perimeter sensor"}}}], "synonyms": ["sensor status", "check sensor", "is sensor detecting", "sensor info"], "tags": ["sensors", "monitoring", "status", "information"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Properties", "Methods"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "sensors.configure_sensor_actions.sensor.v1", "title": "Configure sensor trigger actions", "category": "sensors", "verb": "configure_sensor_actions", "natural_language_triggers": ["configure sensor actions", "set sensor actions", "sensor triggers", "when sensor detects"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "enter_action", "type": "action_reference", "required": false, "validation": "action_exists", "description": "Action when target enters range"}, {"name": "leave_action", "type": "action_reference", "required": false, "validation": "action_exists", "description": "Action when target leaves range"}, {"name": "audible_alert", "type": "boolean", "required": false, "default": false, "validation": "boolean"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Setup Actions"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "SetEnterAction(action)"}, {"interface": "IMySensorBlock", "method": "SetLeaveAction(action)"}, {"interface": "IMySensorBlock", "property": "PlayProximitySound", "method": "set_PlayProximitySound(bool)"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensor must exist", "Sensor must be functional", "Actions must be valid", "Target blocks for actions must exist", "User must have control authority"], "effects": ["Sensor actions configured", "Automation triggers set up", "Enter/leave behaviors defined"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 2000, "instruction_cost": 20}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "validate_action_exists(enter_action)", "validate_action_exists(leave_action)", "check_action_target_blocks_exist(enter_action, leave_action)", "check_user_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "invalid_action", "message": "Invalid action specified for sensor", "recovery": "Use valid block action from available actions"}, {"condition": "action_target_not_found", "message": "Target block for action not found", "recovery": "Ensure target blocks exist for actions"}, {"condition": "no_actions_specified", "message": "No actions specified for sensor configuration", "recovery": "Specify at least one enter or leave action"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "configure airlock sensor open door on enter close on leave", "parsed": {"verb": "configure_sensor_actions", "target": {"name": "airlock sensor"}, "parameters": {"enter_action": "open_door:airlock_door", "leave_action": "close_door:airlock_door"}}}, {"input": "set proximity alert on security sensor", "parsed": {"verb": "configure_sensor_actions", "target": {"name": "security sensor"}, "parameters": {"audible_alert": true, "enter_action": "trigger_alarm"}}}], "synonyms": ["set sensor actions", "sensor triggers", "when sensor detects"], "tags": ["sensors", "automation", "triggers", "actions"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-002.md", "sections": ["Actions Setup", "Automation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "sensors.test_sensor_range.sensor.v1", "title": "Test sensor detection range visibility", "category": "sensors", "verb": "test_sensor_range", "natural_language_triggers": ["test sensor range", "show sensor field", "visualize sensor range", "display detection area"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "show_on_hud", "type": "boolean", "required": false, "default": true, "validation": "boolean"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Show Field Range"], "modapi_calls": [{"interface": "IMySensorBlock", "property": "ShowOnHUD", "method": "set_ShowOnHUD(bool)"}, {"interface": "IMySensorBlock", "method": "ShowFieldRange(bool)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Sensor must exist", "Sensor must be functional", "User must have view authority"], "effects": ["Sensor detection field visualized", "Range boundaries displayed", "Detection area highlighted"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "check_view_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "sensor_range_not_configured", "message": "Sensor '{target}' has no range configured", "recovery": "Configure sensor detection range first"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "show airlock sensor range", "parsed": {"verb": "test_sensor_range", "target": {"name": "airlock sensor"}}}, {"input": "visualize all sensor fields", "parsed": {"verb": "test_sensor_range", "target": {"type": "sensor", "selector": "all"}}}], "synonyms": ["show sensor field", "visualize sensor range", "display detection area"], "tags": ["sensors", "visualization", "testing", "range"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Range Visualization"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}