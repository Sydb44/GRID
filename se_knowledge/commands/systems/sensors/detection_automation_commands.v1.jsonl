{"id": "automation.create_proximity_trigger.sensor.v1", "title": "Create proximity automation trigger", "category": "sensors", "verb": "create_proximity_trigger", "natural_language_triggers": ["create proximity trigger", "proximity automation", "auto trigger on approach", "detect and execute"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "trigger_name", "type": "text", "required": true, "validation": "trigger_name_format"}, {"name": "detection_range", "type": "float", "range": {"min": 0.5, "max": 50.0}, "units": "meters", "default": 10.0, "required": false, "validation": "sensor_range"}, {"name": "target_type", "type": "enum", "values": ["Players", "Enemy", "Friendly", "Ships", "All"], "required": false, "default": "Players", "validation": "detection_target_type"}, {"name": "enter_actions", "type": "action_array", "required": true, "validation": "actions_exist"}, {"name": "leave_actions", "type": "action_array", "required": false, "validation": "actions_exist"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Automation Setup"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "CreateProximityTrigger(name, range, targets, enter_actions, leave_actions)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensor must exist", "Sensor must be functional", "Trigger name must be unique", "Actions must be valid", "User must have automation authority"], "effects": ["Proximity trigger created", "Sensor configured for automation", "Enter/leave actions assigned", "Automation system activated"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 3000, "instruction_cost": 30}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "validate_trigger_name_unique(trigger_name)", "validate_detection_range(detection_range)", "validate_target_type(target_type)", "validate_actions_exist(enter_actions, leave_actions)", "check_automation_authority()"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "trigger_name_exists", "message": "Proximity trigger '{trigger_name}' already exists", "recovery": "Choose a different trigger name"}, {"condition": "invalid_actions", "message": "Invalid actions specified for trigger", "recovery": "Use valid block actions"}, {"condition": "range_invalid", "message": "Detection range {detection_range}m invalid", "recovery": "Use range between 0.5m and 50m"}, {"condition": "no_automation_authority", "message": "No permission to create automation triggers", "recovery": "Automation requires elevated permissions"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create proximity trigger Airlock Entry detect players range 5m actions open_door:airlock", "parsed": {"verb": "create_proximity_trigger", "target": {"name": "airlock sensor"}, "parameters": {"trigger_name": "Airlock Entry", "detection_range": 5.0, "target_type": "Players", "enter_actions": ["open_door:airlock"]}}}, {"input": "proximity automation Security Alert detect enemies", "parsed": {"verb": "create_proximity_trigger", "target": {"name": "security sensor"}, "parameters": {"trigger_name": "Security Alert", "target_type": "Enemy", "enter_actions": ["enable_alarm", "close_security_doors"]}}}], "synonyms": ["proximity automation", "auto trigger on approach", "detect and execute"], "tags": ["sensors", "automation", "proximity", "triggers"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-002.md", "sections": ["Automation", "Actions"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_airlock_sequence.airlock.v1", "title": "Create automated airlock sequence", "category": "sensors", "verb": "create_airlock_sequence", "natural_language_triggers": ["create airlock sequence", "setup airlock automation", "automated airlock", "airlock system"], "targets": {"allowed_types": ["Sensor"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": false, "target_validation": "must_be_sensor"}, "parameters": [{"name": "sequence_name", "type": "text", "required": true, "validation": "sequence_name_format"}, {"name": "inner_door", "type": "block_reference", "required": true, "validation": "door_exists"}, {"name": "outer_door", "type": "block_reference", "required": true, "validation": "door_exists"}, {"name": "air_vent", "type": "block_reference", "required": true, "validation": "airvent_exists"}, {"name": "cycle_time", "type": "float", "range": {"min": 10.0, "max": 300.0}, "units": "seconds", "default": 60.0, "required": false, "validation": "cycle_time_range"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Airlock Automation"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "CreateAirlockSequence(name, inner_door, outer_door, air_vent, cycle_time)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensor must exist", "All airlock components must exist", "Components must be connected", "Sequence name must be unique", "User must have automation authority"], "effects": ["Automated airlock sequence created", "Complete airlock cycle configured", "Safety interlocks established", "Pressurization automation enabled"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 5000, "instruction_cost": 50}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "validate_sequence_name_unique(sequence_name)", "check_door_exists(inner_door)", "check_door_exists(outer_door)", "check_airvent_exists(air_vent)", "validate_airlock_components_connected(inner_door, outer_door, air_vent)", "validate_cycle_time(cycle_time)", "check_automation_authority()"], "error_cases": [{"condition": "sequence_name_exists", "message": "Airlock sequence '{sequence_name}' already exists", "recovery": "Choose a different sequence name"}, {"condition": "door_not_found", "message": "Door '{inner_door}' or '{outer_door}' not found", "recovery": "Check door names and existence"}, {"condition": "airvent_not_found", "message": "Air vent '{air_vent}' not found", "recovery": "Check air vent name and existence"}, {"condition": "components_not_connected", "message": "Airlock components not properly connected", "recovery": "Ensure doors and air vent are in same airtight area"}, {"condition": "cycle_time_invalid", "message": "Cycle time {cycle_time}s invalid", "recovery": "Use cycle time between 10 and 300 seconds"}, {"condition": "no_automation_authority", "message": "No permission to create airlock automation", "recovery": "Automation requires elevated permissions"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create airlock sequence Main Entry with inner door Inner Door outer door Outer Door air vent Main Vent", "parsed": {"verb": "create_airlock_sequence", "target": {"name": "entry sensor"}, "parameters": {"sequence_name": "Main Entry", "inner_door": "Inner Door", "outer_door": "Outer Door", "air_vent": "Main Vent"}}}, {"input": "setup airlock automation cycle 90 seconds", "parsed": {"verb": "create_airlock_sequence", "target": {"zone": "airlock"}, "parameters": {"sequence_name": "Quick Cycle", "inner_door": "Airlock Inner", "outer_door": "Airlock Outer", "air_vent": "Airlock Vent", "cycle_time": 90.0}}}], "synonyms": ["setup airlock automation", "automated airlock", "airlock system"], "tags": ["sensors", "automation", "airlock", "sequence", "life_support"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Usage Examples", "Airlock Automation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_security_system.sensor.v1", "title": "Create automated security system", "category": "sensors", "verb": "create_security_system", "natural_language_triggers": ["create security system", "setup security automation", "automated defense", "security alert system"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "system_name", "type": "text", "required": true, "validation": "security_name_format"}, {"name": "alert_actions", "type": "action_array", "required": true, "validation": "actions_exist", "description": "Actions to trigger on threat detection"}, {"name": "lockdown_actions", "type": "action_array", "required": false, "validation": "actions_exist", "description": "Actions for security lockdown"}, {"name": "response_delay", "type": "float", "range": {"min": 0.0, "max": 30.0}, "units": "seconds", "default": 2.0, "required": false, "validation": "response_delay_range"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Security System"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "CreateSecuritySystem(name, alert_actions, lockdown_actions, delay)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensors must exist", "Security system name must be unique", "Actions must be valid", "User must have security authority"], "effects": ["Automated security system created", "Threat detection configured", "Response protocols established", "Security automation activated"], "constraints": {"power_required_mw": 0.001, "network_sync": true, "multiplayer_authority": "security_admin", "execution_time_ms": 8000, "instruction_cost": 60}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_sensor(target)", "validate_security_name_unique(system_name)", "validate_actions_exist(alert_actions, lockdown_actions)", "validate_response_delay(response_delay)", "check_security_authority()"], "error_cases": [{"condition": "system_name_exists", "message": "Security system '{system_name}' already exists", "recovery": "Choose a different system name"}, {"condition": "invalid_actions", "message": "Invalid security actions specified", "recovery": "Use valid block actions for security system"}, {"condition": "no_security_authority", "message": "No permission to create security systems", "recovery": "Security automation requires admin permissions"}, {"condition": "response_delay_invalid", "message": "Response delay {response_delay}s invalid", "recovery": "Use delay between 0 and 30 seconds"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create security system Perimeter Defense actions sound_alarm close_blast_doors", "parsed": {"verb": "create_security_system", "target": {"zone": "perimeter"}, "parameters": {"system_name": "Perimeter Defense", "alert_actions": ["sound_alarm", "close_blast_doors"]}}}, {"input": "setup security automation with lockdown", "parsed": {"verb": "create_security_system", "target": {"name": "main sensor"}, "parameters": {"system_name": "Base Security", "alert_actions": ["activate_warning_lights", "sound_alarm"], "lockdown_actions": ["close_all_doors", "enable_turret_ai"], "response_delay": 5.0}}}], "synonyms": ["setup security automation", "automated defense", "security alert system"], "tags": ["sensors", "security", "automation", "defense"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Security Usage"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_docking_assistance.sensor.v1", "title": "Create automated docking assistance", "category": "sensors", "verb": "create_docking_assistance", "natural_language_triggers": ["create docking assistance", "docking automation", "auto docking", "landing assistance"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "assistance_name", "type": "text", "required": true, "validation": "assistance_name_format"}, {"name": "hangar_door", "type": "block_reference", "required": false, "validation": "door_exists"}, {"name": "landing_lights", "type": "block_reference", "required": false, "validation": "lights_exist"}, {"name": "docking_connector", "type": "block_reference", "required": false, "validation": "connector_exists"}, {"name": "approach_distance", "type": "float", "range": {"min": 50.0, "max": 1000.0}, "units": "meters", "default": 200.0, "required": false, "validation": "approach_distance_range"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Docking Automation"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "CreateDockingAssistance(name, door, lights, connector, distance)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensors must exist", "Assistance name must be unique", "Referenced blocks must exist if specified", "User must have automation authority"], "effects": ["Docking assistance system created", "Approach detection configured", "Landing sequence automation enabled", "Docking procedures established"], "constraints": {"power_required_mw": 0.002, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 5000, "instruction_cost": 40}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_sensor(target)", "validate_assistance_name_unique(assistance_name)", "check_door_exists_optional(hangar_door)", "check_lights_exist_optional(landing_lights)", "check_connector_exists_optional(docking_connector)", "validate_approach_distance(approach_distance)", "check_automation_authority()"], "error_cases": [{"condition": "assistance_name_exists", "message": "Docking assistance '{assistance_name}' already exists", "recovery": "Choose a different assistance name"}, {"condition": "hangar_door_not_found", "message": "Hangar door '{hangar_door}' not found", "recovery": "Check hangar door name or remove from configuration"}, {"condition": "lights_not_found", "message": "Landing lights '{landing_lights}' not found", "recovery": "Check light names or remove from configuration"}, {"condition": "connector_not_found", "message": "Docking connector '{docking_connector}' not found", "recovery": "Check connector name or remove from configuration"}, {"condition": "approach_distance_invalid", "message": "Approach distance {approach_distance}m invalid", "recovery": "Use distance between 50m and 1000m"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create docking assistance Main Landing with hangar Main Hangar lights Landing Lights", "parsed": {"verb": "create_docking_assistance", "target": {"zone": "landing"}, "parameters": {"assistance_name": "Main Landing", "hangar_door": "Main Hangar", "landing_lights": "Landing Lights"}}}, {"input": "auto docking system approach 500m", "parsed": {"verb": "create_docking_assistance", "target": {"name": "dock sensor"}, "parameters": {"assistance_name": "Auto Dock", "approach_distance": 500.0}}}], "synonyms": ["docking automation", "auto docking", "landing assistance"], "tags": ["sensors", "automation", "docking", "landing"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Usage Examples", "Docking"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_motion_lights.sensor.v1", "title": "Create motion-activated lighting", "category": "sensors", "verb": "create_motion_lights", "natural_language_triggers": ["create motion lights", "motion activated lights", "auto lights on approach", "proximity lighting"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "lights_name", "type": "text", "required": true, "validation": "lights_name_format"}, {"name": "target_lights", "type": "block_reference_array", "required": true, "validation": "lights_exist"}, {"name": "activation_range", "type": "float", "range": {"min": 1.0, "max": 50.0}, "units": "meters", "default": 10.0, "required": false, "validation": "sensor_range"}, {"name": "auto_off_delay", "type": "float", "range": {"min": 5.0, "max": 600.0}, "units": "seconds", "default": 60.0, "required": false, "validation": "auto_off_delay_range"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Motion Lighting"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "CreateMotionLighting(name, lights, range, delay)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensors must exist", "Target lights must exist", "Lights name must be unique", "User must have automation authority"], "effects": ["Motion lighting system created", "Proximity-based light activation", "Automatic light timing", "Energy-efficient lighting"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 3000, "instruction_cost": 25}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_sensor(target)", "validate_lights_name_unique(lights_name)", "check_lights_exist(target_lights)", "validate_activation_range(activation_range)", "validate_auto_off_delay(auto_off_delay)", "check_automation_authority()"], "error_cases": [{"condition": "lights_name_exists", "message": "Motion lights '{lights_name}' already exists", "recovery": "Choose a different lights name"}, {"condition": "target_lights_not_found", "message": "Target lights not found: {target_lights}", "recovery": "Check light names and existence"}, {"condition": "activation_range_invalid", "message": "Activation range {activation_range}m invalid", "recovery": "Use range between 1m and 50m"}, {"condition": "auto_off_delay_invalid", "message": "Auto-off delay {auto_off_delay}s invalid", "recovery": "Use delay between 5 and 600 seconds"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create motion lights Corridor Lights for hallway lights range 8m", "parsed": {"verb": "create_motion_lights", "target": {"zone": "corridor"}, "parameters": {"lights_name": "Corridor Lights", "target_lights": ["hallway lights"], "activation_range": 8.0}}}, {"input": "motion activated lights 30 second delay", "parsed": {"verb": "create_motion_lights", "target": {"name": "motion sensor"}, "parameters": {"lights_name": "Auto Lights", "target_lights": ["area lights"], "auto_off_delay": 30.0}}}], "synonyms": ["motion activated lights", "auto lights on approach", "proximity lighting"], "tags": ["sensors", "automation", "lighting", "motion"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Usage Examples", "Motion Detection"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_collision_avoidance.sensor.v1", "title": "Create collision avoidance system", "category": "sensors", "verb": "create_collision_avoidance", "natural_language_triggers": ["create collision avoidance", "collision detection", "safety sensors", "crash prevention"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [{"name": "system_name", "type": "text", "required": true, "validation": "system_name_format"}, {"name": "safety_distance", "type": "float", "range": {"min": 5.0, "max": 50.0}, "units": "meters", "default": 20.0, "required": false, "validation": "safety_distance_range"}, {"name": "emergency_actions", "type": "action_array", "required": true, "validation": "actions_exist", "description": "Emergency stop/brake actions"}, {"name": "warning_actions", "type": "action_array", "required": false, "validation": "actions_exist", "description": "Warning/alert actions"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Collision Avoidance"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "CreateCollisionAvoidance(name, distance, emergency_actions, warning_actions)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensors must exist", "System name must be unique", "Emergency actions must be valid", "User must have safety authority"], "effects": ["Collision avoidance system created", "Safety detection configured", "Emergency response procedures established", "Crash prevention activated"], "constraints": {"power_required_mw": 0.001, "network_sync": true, "multiplayer_authority": "safety_admin", "execution_time_ms": 5000, "instruction_cost": 45}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_sensor(target)", "validate_system_name_unique(system_name)", "validate_safety_distance(safety_distance)", "validate_actions_exist(emergency_actions, warning_actions)", "check_safety_authority()"], "error_cases": [{"condition": "system_name_exists", "message": "Collision avoidance '{system_name}' already exists", "recovery": "Choose a different system name"}, {"condition": "invalid_emergency_actions", "message": "Invalid emergency actions specified", "recovery": "Use valid emergency stop/brake actions"}, {"condition": "safety_distance_invalid", "message": "Safety distance {safety_distance}m invalid", "recovery": "Use safety distance between 5m and 50m"}, {"condition": "no_safety_authority", "message": "No permission to create collision avoidance systems", "recovery": "Safety systems require admin permissions"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create collision avoidance Mining Safety actions emergency_stop", "parsed": {"verb": "create_collision_avoidance", "target": {"zone": "mining"}, "parameters": {"system_name": "Mining Safety", "emergency_actions": ["emergency_stop"]}}}, {"input": "safety sensors 15m distance with warnings", "parsed": {"verb": "create_collision_avoidance", "target": {"name": "forward sensors"}, "parameters": {"system_name": "Forward Safety", "safety_distance": 15.0, "emergency_actions": ["stop_thrusters"], "warning_actions": ["sound_warning", "flash_lights"]}}}], "synonyms": ["collision detection", "safety sensors", "crash prevention"], "tags": ["sensors", "safety", "collision", "automation"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Safety Usage"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.get_detected_entities.sensor.v1", "title": "Get entities detected by sensor", "category": "sensors", "verb": "get_detected_entities", "natural_language_triggers": ["get detected entities", "what is sensor detecting", "detected objects", "sensor targets"], "targets": {"allowed_types": ["Sensor", "Automaton Sensor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_sensor"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Sensor", "Detected Entities"], "modapi_calls": [{"interface": "IMySensorBlock", "method": "GetDetectedEntities()"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Sensor must exist", "Sensor must be functional and enabled", "User must have view authority"], "effects": ["Returns list of detected entities", "Returns entity types and positions", "Returns detection timestamps", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 5, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_sensor(target)", "check_block_functional(target)", "check_sensor_enabled(target)", "check_view_authority(target)"], "error_cases": [{"condition": "sensor_not_found", "message": "No sensors matching '{target}' found", "recovery": "List available sensors"}, {"condition": "sensor_disabled", "message": "Sensor '{target}' is disabled", "recovery": "Enable sensor to detect entities"}, {"condition": "no_detections", "message": "Sensor '{target}' is not detecting anything", "recovery": "No entities currently in sensor range"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "what is security sensor detecting", "parsed": {"verb": "get_detected_entities", "target": {"name": "security sensor"}}}, {"input": "detected objects in perimeter", "parsed": {"verb": "get_detected_entities", "target": {"zone": "perimeter"}}}], "synonyms": ["what is sensor detecting", "detected objects", "sensor targets"], "tags": ["sensors", "monitoring", "detection", "entities"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Methods", "Detection"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}