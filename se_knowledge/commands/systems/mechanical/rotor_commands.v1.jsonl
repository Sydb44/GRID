{"id": "mechanical.start_rotor.rotor.v1", "title": "Start rotor rotation", "category": "mechanical", "verb": "start_rotor", "natural_language_triggers": ["start rotor", "rotate rotor", "rotor on", "begin rotation"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected", "subgrids"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [{"name": "direction", "type": "enum", "values": ["Clockwise", "Counterclockwise"], "required": false, "default": "Clockwise", "validation": "rotation_direction_valid"}], "se_implementation": {"toolbar_actions": ["OnOff_On"], "terminal_path": ["Terminal", "Rotor", "On/Off"], "modapi_calls": [{"interface": "IMyMotorStator", "property": "Enabled", "method": "set_Enabled(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Rotor must exist", "Rotor must be functional", "Rotor must be powered", "Rotor must have attached rotor head", "User must have control authority"], "effects": ["Rotor starts spinning", "Rotor.Enabled = true", "Attached blocks rotate", "Power consumption begins"], "constraints": {"power_required_mw": 0.002, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1000, "instruction_cost": 8}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_block_functional(target)", "check_block_powered(target)", "check_rotor_has_head(target)", "check_user_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}, {"condition": "rotor_no_head", "message": "Rotor '{target}' has no rotor head attached", "recovery": "Attach rotor head to enable rotation"}, {"condition": "rotor_unpowered", "message": "Rotor '{target}' has no power", "recovery": "Check power grid and connections"}, {"condition": "rotation_blocked", "message": "Rotor '{target}' rotation is blocked", "recovery": "Clear obstruction from rotor path"}, {"condition": "rotor_overloaded", "message": "Rotor '{target}' is overloaded", "recovery": "Reduce load on rotor head"}], "safety_class": "caution", "idempotent": true, "reversible": true, "examples": [{"input": "start drill rotor", "parsed": {"verb": "start_rotor", "target": {"name": "drill rotor"}}}, {"input": "rotate turret counterclockwise", "parsed": {"verb": "start_rotor", "target": {"name": "turret"}, "parameters": {"direction": "Counterclockwise"}}}], "synonyms": ["rotate rotor", "rotor on", "begin rotation"], "tags": ["mechanical", "rotor", "rotation", "start"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Methods", "Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "mechanical.stop_rotor.rotor.v1", "title": "Stop rotor rotation", "category": "mechanical", "verb": "stop_rotor", "natural_language_triggers": ["stop rotor", "halt rotor", "rotor off", "stop rotation"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected", "subgrids"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_Off"], "terminal_path": ["Terminal", "Rotor", "On/Off"], "modapi_calls": [{"interface": "IMyMotorStator", "property": "Enabled", "method": "set_Enabled(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Rotor must exist", "Rotor must be functional", "User must have control authority"], "effects": ["Rotor stops spinning", "Rotor.Enabled = false", "Rotation ceases", "Power consumption stops"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 500, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_block_functional(target)", "check_user_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}, {"condition": "rotor_already_stopped", "message": "Rotor '{target}' is already stopped", "recovery": "Rotor is not rotating"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "stop turret rotor", "parsed": {"verb": "stop_rotor", "target": {"name": "turret rotor"}}}, {"input": "halt all rotors", "parsed": {"verb": "stop_rotor", "target": {"type": "rotor", "selector": "all"}}}], "synonyms": ["halt rotor", "rotor off", "stop rotation"], "tags": ["mechanical", "rotor", "rotation", "stop"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "mechanical.set_rotor_velocity.rotor.v1", "title": "Set rotor rotation velocity", "category": "mechanical", "verb": "set_rotor_velocity", "natural_language_triggers": ["set rotor speed", "rotor velocity", "rotation speed", "rotor rpm"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [{"name": "velocity", "type": "float", "range": {"min": -30.0, "max": 30.0}, "units": "RPM", "default": 5.0, "required": true, "validation": "rotor_velocity_range", "terminal_name": "Velocity", "description": "Negative values reverse direction"}], "se_implementation": {"toolbar_actions": ["IncreaseVelocity", "DecreaseVelocity"], "terminal_path": ["Terminal", "Rotor", "Velocity"], "modapi_calls": [{"interface": "IMyMotorStator", "property": "TargetVelocityRPM", "method": "set_TargetVelocityRPM(float velocity)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Rotor must exist", "Rotor must be functional", "User must have control authority"], "effects": ["Rotor.TargetVelocityRPM = velocity", "Rotation speed changes", "Direction reverses if velocity is negative"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_block_functional(target)", "validate_rotor_velocity_range(velocity)", "check_user_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}, {"condition": "velocity_out_of_range", "message": "Velocity {velocity} RPM out of range (-30 to 30)", "recovery": "Use velocity between -30 and 30 RPM"}, {"condition": "velocity_too_high_for_load", "message": "Velocity too high for current rotor load", "recovery": "Reduce velocity or decrease rotor load"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set drill rotor speed to 10 rpm", "parsed": {"verb": "set_rotor_velocity", "target": {"name": "drill rotor"}, "parameters": {"velocity": 10.0}}}, {"input": "rotor velocity -5 reverse", "parsed": {"verb": "set_rotor_velocity", "target": {"type": "rotor"}, "parameters": {"velocity": -5.0}}}], "synonyms": ["set rotor speed", "rotor velocity", "rotation speed", "rotor rpm"], "tags": ["mechanical", "rotor", "velocity", "speed", "rpm"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Properties", "Velocity Control"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "mechanical.set_rotor_angle.rotor.v1", "title": "Set rotor to specific angle", "category": "mechanical", "verb": "set_rotor_angle", "natural_language_triggers": ["set rotor angle", "rotate to angle", "rotor position", "turn rotor to"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [{"name": "angle", "type": "angle_degrees", "range": {"min": -360, "max": 360}, "units": "degrees", "default": 0, "required": true, "validation": "rotor_angle_range", "terminal_name": "Target Angle"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Rotor", "Target Angle"], "modapi_calls": [{"interface": "IMyMotorStator", "method": "SetTargetAngle(float degrees)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Rotor must exist", "Rotor must be functional", "Rotor must be powered", "Angle must be within limits", "User must have control authority"], "effects": ["Rotor rotates to target angle", "Automatic positioning to specified degrees", "Movement stops at target angle"], "constraints": {"power_required_mw": 0.002, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 5000, "instruction_cost": 12}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_block_functional(target)", "check_block_powered(target)", "validate_rotor_angle_within_limits(target, angle)", "check_user_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}, {"condition": "angle_out_of_limits", "message": "Angle {angle}Â° outside rotor limits for '{target}'", "recovery": "Use angle within rotor's rotation limits"}, {"condition": "rotation_blocked", "message": "Path to angle {angle}Â° is blocked for '{target}'", "recovery": "Clear obstruction from rotor rotation path"}, {"condition": "rotor_overloaded", "message": "Rotor '{target}' cannot rotate to angle due to load", "recovery": "Reduce load on rotor head"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set turret angle to 90 degrees", "parsed": {"verb": "set_rotor_angle", "target": {"name": "turret"}, "parameters": {"angle": 90}}}, {"input": "rotate solar panel to 45Â°", "parsed": {"verb": "set_rotor_angle", "target": {"name": "solar panel"}, "parameters": {"angle": 45}}}], "synonyms": ["rotate to angle", "rotor position", "turn rotor to"], "tags": ["mechanical", "rotor", "angle", "position", "precise"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Methods", "Angle Control"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "mechanical.set_rotor_limits.rotor.v1", "title": "Set rotor rotation limits", "category": "mechanical", "verb": "set_rotor_limits", "natural_language_triggers": ["set rotor limits", "rotor limits", "limit rotor rotation", "rotor boundaries"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [{"name": "min_angle", "type": "angle_degrees", "range": {"min": -360, "max": 360}, "units": "degrees", "required": true, "validation": "rotor_limit_range", "terminal_name": "Lower Limit"}, {"name": "max_angle", "type": "angle_degrees", "range": {"min": -360, "max": 360}, "units": "degrees", "required": true, "validation": "rotor_limit_range", "terminal_name": "Upper Limit"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Rotor", "Limits"], "modapi_calls": [{"interface": "IMyMotorStator", "property": "LowerLimitDeg", "method": "set_LowerLimitDeg(float min)"}, {"interface": "IMyMotorStator", "property": "UpperLimitDeg", "method": "set_UpperLimitDeg(float max)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Rotor must exist", "Rotor must be functional", "Min angle must be less than max angle", "User must have control authority"], "effects": ["Rotor.LowerLimitDeg = min_angle", "Rotor.UpperLimitDeg = max_angle", "Rotation restricted to new limits", "Safety boundaries established"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 8}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_block_functional(target)", "validate_rotor_limits(min_angle, max_angle)", "check_user_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}, {"condition": "invalid_limit_range", "message": "Min angle {min_angle}Â° must be less than max angle {max_angle}Â°", "recovery": "Ensure minimum is less than maximum"}, {"condition": "current_angle_outside_limits", "message": "Current angle outside new limits", "recovery": "Rotate rotor within new limits first"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set turret limits -90Â° to 90Â°", "parsed": {"verb": "set_rotor_limits", "target": {"name": "turret"}, "parameters": {"min_angle": -90, "max_angle": 90}}}, {"input": "limit rotor rotation 0 to 180 degrees", "parsed": {"verb": "set_rotor_limits", "target": {"type": "rotor"}, "parameters": {"min_angle": 0, "max_angle": 180}}}], "synonyms": ["rotor limits", "limit rotor rotation", "rotor boundaries"], "tags": ["mechanical", "rotor", "limits", "safety", "angle"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Properties", "Limits"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "mechanical.get_rotor_angle.rotor.v1", "title": "Get rotor current angle", "category": "mechanical", "verb": "get_rotor_angle", "natural_language_triggers": ["get rotor angle", "rotor angle", "current rotor position", "where is rotor"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Rotor", "Current Angle"], "modapi_calls": [{"interface": "IMyMotorStator", "property": "Angle", "method": "get_Angle()"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Rotor must exist", "User must have view authority"], "effects": ["Returns current rotor angle in degrees", "Returns rotation status", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 1, "instruction_cost": 2}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_view_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "get turret angle", "parsed": {"verb": "get_rotor_angle", "target": {"name": "turret"}}}, {"input": "where is drill rotor", "parsed": {"verb": "get_rotor_angle", "target": {"name": "drill rotor"}}}], "synonyms": ["rotor angle", "current rotor position", "where is rotor"], "tags": ["mechanical", "monitoring", "rotor", "angle"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "mechanical.reverse_rotor.rotor.v1", "title": "Reverse rotor rotation direction", "category": "mechanical", "verb": "reverse_rotor", "natural_language_triggers": ["reverse rotor", "rotor reverse", "change rotor direction", "flip rotor"], "targets": {"allowed_types": ["Rotor", "Advanced Rotor", "Small Rotor"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_rotor"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Reverse"], "terminal_path": ["Terminal", "Rotor", "Reverse"], "modapi_calls": [{"interface": "IMyMotorStator", "method": "ReverseDirection()"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Rotor must exist", "Rotor must be functional", "User must have control authority"], "effects": ["Rotor direction reverses", "Velocity sign flips", "Rotation direction changes"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 500, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_rotor(target)", "check_block_functional(target)", "check_user_authority(target)"], "error_cases": [{"condition": "rotor_not_found", "message": "No rotors matching '{target}' found", "recovery": "List available rotors"}, {"condition": "rotor_not_moving", "message": "Rotor '{target}' is not currently rotating", "recovery": "Start rotor first or set velocity"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "reverse drill rotor", "parsed": {"verb": "reverse_rotor", "target": {"name": "drill rotor"}}}, {"input": "flip turret direction", "parsed": {"verb": "reverse_rotor", "target": {"name": "turret"}}}], "synonyms": ["rotor reverse", "change rotor direction", "flip rotor"], "tags": ["mechanical", "rotor", "reverse", "direction"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyMotorStator.md", "sections": ["Methods"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}