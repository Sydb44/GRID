{"id": "access.set_door_access.door.v1", "title": "Set door access permissions", "category": "doors_access", "verb": "set_door_access", "natural_language_triggers": ["set door access", "door permissions", "access control", "who can use door"], "targets": {"allowed_types": ["Door", "Advanced Door", "Airtight Hangar Door", "Airtight Slide Door"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_door"}, "parameters": [{"name": "access_level", "type": "enum", "values": ["Owner", "Faction", "Everyone", "Nobody"], "required": true, "validation": "access_level_valid"}, {"name": "specific_players", "type": "text_array", "required": false, "validation": "player_names_exist", "description": "Specific player names for custom access"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Door", "Access Control"], "modapi_calls": [{"interface": "IMyDoor", "method": "SetAccess(access_level, players)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": false}, "preconditions": ["Door must exist", "Door must be functional", "User must be owner or admin", "Access level must be valid"], "effects": ["Door access permissions updated", "Only authorized users can operate door", "Security level enforced"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 10}, "validation_hooks": ["check_block_exists(target)", "check_block_type_door(target)", "check_block_functional(target)", "validate_access_level(access_level)", "validate_player_names(specific_players)", "check_owner_authority(target)"], "error_cases": [{"condition": "door_not_found", "message": "No doors matching '{target}' found", "recovery": "List available doors"}, {"condition": "invalid_access_level", "message": "Invalid access level '{access_level}'", "recovery": "Use Owner, Faction, Everyone, or Nobody"}, {"condition": "player_not_found", "message": "Player '{player}' not found", "recovery": "Check player name spelling"}, {"condition": "no_owner_authority", "message": "Only owner can set access permissions for '{target}'", "recovery": "Must be block owner to change access"}], "safety_class": "restricted", "idempotent": true, "reversible": true, "examples": [{"input": "set security door access to faction only", "parsed": {"verb": "set_door_access", "target": {"name": "security door"}, "parameters": {"access_level": "Faction"}}}, {"input": "door permissions everyone can use", "parsed": {"verb": "set_door_access", "target": {"type": "door"}, "parameters": {"access_level": "Everyone"}}}], "synonyms": ["door permissions", "access control", "who can use door"], "tags": ["doors", "access", "security", "permissions"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/", "sections": ["Access Control"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "access.lock_door.door.v1", "title": "Lock door", "category": "doors_access", "verb": "lock_door", "natural_language_triggers": ["lock door", "secure door", "door lock", "disable door"], "targets": {"allowed_types": ["Door", "Advanced Door", "Airtight Hangar Door", "Airtight Slide Door"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_lockable_door"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Lock"], "terminal_path": ["Terminal", "Door", "Lock"], "modapi_calls": [{"interface": "IMyDoor", "property": "Locked", "method": "set_Locked(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Door must exist", "Door must be functional", "Door must support locking", "User must have lock authority"], "effects": ["Door becomes locked", "Door.Locked = true", "Door cannot be opened without unlock", "Security status activated"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "access_allowed", "execution_time_ms": 1, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_lockable_door(target)", "check_block_functional(target)", "check_lock_authority(target)"], "error_cases": [{"condition": "door_not_found", "message": "No doors matching '{target}' found", "recovery": "List available doors"}, {"condition": "door_not_lockable", "message": "Door '{target}' does not support locking", "recovery": "Only certain door types can be locked"}, {"condition": "already_locked", "message": "Door '{target}' is already locked", "recovery": "Door is already in locked state"}, {"condition": "no_lock_authority", "message": "No permission to lock '{target}'", "recovery": "Check access permissions"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "lock security doors", "parsed": {"verb": "lock_door", "target": {"name": "security doors"}}}, {"input": "secure all hangar doors", "parsed": {"verb": "lock_door", "target": {"type": "hangar_door", "selector": "all"}}}], "synonyms": ["secure door", "door lock", "disable door"], "tags": ["doors", "security", "lock", "disable"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMyDoor.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "access.unlock_door.door.v1", "title": "Unlock door", "category": "doors_access", "verb": "unlock_door", "natural_language_triggers": ["unlock door", "unsecure door", "door unlock", "enable door"], "targets": {"allowed_types": ["Door", "Advanced Door", "Airtight Hangar Door", "Airtight Slide Door"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_lockable_door"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Unlock"], "terminal_path": ["Terminal", "Door", "Unlock"], "modapi_calls": [{"interface": "IMyDoor", "property": "Locked", "method": "set_Locked(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Door must exist", "Door must be functional", "Door must support locking", "User must have unlock authority"], "effects": ["Door becomes unlocked", "Door.Locked = false", "Door can be operated normally", "Security status deactivated"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "access_allowed", "execution_time_ms": 1, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_lockable_door(target)", "check_block_functional(target)", "check_unlock_authority(target)"], "error_cases": [{"condition": "door_not_found", "message": "No doors matching '{target}' found", "recovery": "List available doors"}, {"condition": "door_not_lockable", "message": "Door '{target}' does not support locking", "recovery": "Only certain door types can be locked/unlocked"}, {"condition": "already_unlocked", "message": "Door '{target}' is already unlocked", "recovery": "Door is already in unlocked state"}, {"condition": "no_unlock_authority", "message": "No permission to unlock '{target}'", "recovery": "Check access permissions"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "unlock main entrance", "parsed": {"verb": "unlock_door", "target": {"name": "main entrance"}}}, {"input": "enable all doors", "parsed": {"verb": "unlock_door", "target": {"type": "door", "selector": "all"}}}], "synonyms": ["unsecure door", "door unlock", "enable door"], "tags": ["doors", "security", "unlock", "enable"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMyDoor.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "access.get_door_access.door.v1", "title": "Get door access settings", "category": "doors_access", "verb": "get_door_access", "natural_language_triggers": ["get door access", "check door permissions", "door access level", "who can use door"], "targets": {"allowed_types": ["Door", "Advanced Door", "Airtight Hangar Door", "Airtight Slide Door"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_door"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Door", "Access Info"], "modapi_calls": [{"interface": "IMyDoor", "method": "GetAccessInfo()"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Door must exist", "User must have view authority"], "effects": ["Returns access level setting", "Returns authorized user list", "Returns security status", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_door(target)", "check_view_authority(target)"], "error_cases": [{"condition": "door_not_found", "message": "No doors matching '{target}' found", "recovery": "List available doors"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "check security door permissions", "parsed": {"verb": "get_door_access", "target": {"name": "security door"}}}, {"input": "who can use hangar door", "parsed": {"verb": "get_door_access", "target": {"name": "hangar door"}}}], "synonyms": ["check door permissions", "door access level", "who can use door"], "tags": ["doors", "access", "information", "permissions"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/", "sections": ["Access Control"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "access.set_door_auto_close.door.v1", "title": "Set door auto-close timer", "category": "doors_access", "verb": "set_door_auto_close", "natural_language_triggers": ["set door auto close", "door auto close timer", "automatic door close", "door close delay"], "targets": {"allowed_types": ["Advanced Door", "Airtight Hangar Door", "Airtight Slide Door"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_advanced_door"}, "parameters": [{"name": "delay_seconds", "type": "float", "range": {"min": 0, "max": 3600}, "units": "seconds", "default": 10.0, "required": true, "validation": "auto_close_delay_range"}, {"name": "enable_auto_close", "type": "boolean", "required": false, "default": true, "validation": "boolean"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Advanced Door", "Auto Close"], "modapi_calls": [{"interface": "IMyAdvancedDoor", "property": "AutoCloseDelay", "method": "set_AutoCloseDelay(float seconds)"}, {"interface": "IMyAdvancedDoor", "property": "AutoClose", "method": "set_AutoClose(bool enabled)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Door must exist", "Door must be advanced door type", "Door must be functional", "User must have control authority"], "effects": ["Door.AutoCloseDelay = delay_seconds", "Door.AutoClose = enable_auto_close", "Door will auto-close after delay", "Automatic door management enabled"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 8}, "validation_hooks": ["check_block_exists(target)", "check_block_type_advanced_door(target)", "check_block_functional(target)", "validate_auto_close_delay(delay_seconds)", "check_user_authority(target)"], "error_cases": [{"condition": "door_not_advanced", "message": "Door '{target}' does not support auto-close", "recovery": "Only advanced doors support auto-close timers"}, {"condition": "delay_out_of_range", "message": "Auto-close delay {delay_seconds}s out of range (0-3600s)", "recovery": "Use delay between 0 and 3600 seconds"}, {"condition": "door_not_found", "message": "No advanced doors matching '{target}' found", "recovery": "List available advanced doors"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set airlock auto close 30 seconds", "parsed": {"verb": "set_door_auto_close", "target": {"name": "airlock"}, "parameters": {"delay_seconds": 30.0}}}, {"input": "hangar door close delay 60", "parsed": {"verb": "set_door_auto_close", "target": {"name": "hangar door"}, "parameters": {"delay_seconds": 60.0}}}], "synonyms": ["door auto close timer", "automatic door close", "door close delay"], "tags": ["doors", "automation", "auto_close", "timer"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMyAdvancedDoor.md", "sections": ["Properties"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/", "sections": ["Advanced Door Features"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "access.create_door_group.group.v1", "title": "Create door control group", "category": "doors_access", "verb": "create_door_group", "natural_language_triggers": ["create door group", "group doors", "door control group", "airlock group"], "targets": {"allowed_types": ["Door", "Advanced Door", "Airtight Hangar Door", "Airtight Slide Door"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_doors"}, "parameters": [{"name": "group_name", "type": "text", "required": true, "validation": "group_name_format"}, {"name": "group_type", "type": "enum", "values": ["standard", "airlock", "security", "hangar"], "required": false, "default": "standard", "validation": "door_group_type_valid"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Groups", "Create Door Group"], "modapi_calls": [{"interface": "IMyBlockGroup", "method": "CreateDoorGroup(name, doors, type)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Doors must exist", "Group name must be unique", "User must have control authority"], "effects": ["New door group created", "Doors added to group", "Group-based control enabled", "Specialized behaviors applied"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 2000, "instruction_cost": 20}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_door(target)", "validate_group_name_unique(group_name)", "validate_door_group_type(group_type)", "check_user_authority(target)"], "error_cases": [{"condition": "group_name_exists", "message": "Door group '{group_name}' already exists", "recovery": "Choose a different group name"}, {"condition": "invalid_group_type", "message": "Invalid door group type '{group_type}'", "recovery": "Use standard, airlock, security, or hangar"}, {"condition": "doors_not_found", "message": "No doors found matching '{target}'", "recovery": "Specify existing doors for the group"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create door group Airlock Alpha from airlock doors", "parsed": {"verb": "create_door_group", "target": {"zone": "airlock"}, "parameters": {"group_name": "Airlock Alpha", "group_type": "airlock"}}}, {"input": "group hangar doors as Main Hangar", "parsed": {"verb": "create_door_group", "target": {"type": "hangar_door"}, "parameters": {"group_name": "Main Hangar", "group_type": "hangar"}}}], "synonyms": ["group doors", "door control group", "airlock group"], "tags": ["doors", "grouping", "organization", "automation"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/", "sections": ["Block Groups"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}