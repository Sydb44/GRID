{"id": "environmental.create_gravity_elevator.automation.v1", "title": "Create gravity elevator system", "category": "environmental", "verb": "create_gravity_elevator", "natural_language_triggers": ["create gravity elevator", "gravity lift", "artificial gravity transport", "gravity conveyor"], "targets": {"allowed_types": ["Gravity Generator"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_gravity_generator"}, "parameters": [{"name": "elevator_name", "type": "text", "required": true, "validation": "elevator_name_format"}, {"name": "elevator_path", "type": "coordinate_pair", "required": true, "validation": "coordinate_bounds", "description": "Start and end coordinates for elevator"}, {"name": "transport_speed", "type": "float", "range": {"min": 0.1, "max": 1.0}, "units": "g", "default": 0.5, "required": false, "validation": "transport_speed_range"}, {"name": "safety_sensors", "type": "block_reference_array", "required": false, "validation": "sensors_exist"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Gravity Generator", "Elevator System"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateGravityElevator(name, generators, path, speed, sensors)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Gravity generators must exist", "Elevator name must be unique", "Elevator path must be valid", "User must have automation authority"], "effects": ["Gravity elevator system created", "Automated vertical transport", "Gravity-powered movement", "Player/cargo transport system"], "constraints": {"power_required_mw": 1.0, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 15000, "instruction_cost": 120}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_gravity_generator(target)", "validate_elevator_name_unique(elevator_name)", "validate_elevator_path_bounds(elevator_path)", "validate_transport_speed_range(transport_speed)", "check_sensors_exist_optional(safety_sensors)", "check_automation_authority()"], "error_cases": [{"condition": "elevator_name_exists", "message": "Gravity elevator '{elevator_name}' already exists", "recovery": "Choose a different elevator name"}, {"condition": "invalid_elevator_path", "message": "Invalid elevator path coordinates", "recovery": "Use valid GPS coordinate pairs for elevator path"}, {"condition": "transport_speed_invalid", "message": "Transport speed {transport_speed}g invalid", "recovery": "Use transport speed between 0.1g and 1.0g"}, {"condition": "insufficient_gravity_generators", "message": "Insufficient gravity generators for elevator system", "recovery": "Add more gravity generators along elevator path"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create gravity elevator Cargo Lift path GPS:Bottom:0:0:0: GPS:Top:0:50:0: speed 0.3", "parsed": {"verb": "create_gravity_elevator", "target": {"zone": "cargo"}, "parameters": {"elevator_name": "Cargo Lift", "elevator_path": ["GPS:Bottom:0:0:0:", "GPS:Top:0:50:0:"], "transport_speed": 0.3}}}, {"input": "gravity transport system", "parsed": {"verb": "create_gravity_elevator", "target": {"name": "elevator gravity"}, "parameters": {"elevator_name": "Transport System", "elevator_path": ["GPS:Level1:100:0:100:", "GPS:Level2:100:25:100:"], "safety_sensors": ["Safety Sensor"]}}}], "synonyms": ["gravity lift", "artificial gravity transport", "gravity conveyor"], "tags": ["environmental", "automation", "gravity", "transport"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Power/Gravity_Generator__part-002.md", "sections": ["Transportation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "environmental.create_gravity_drive.automation.v1", "title": "Create gravity drive propulsion", "category": "environmental", "verb": "create_gravity_drive", "natural_language_triggers": ["create gravity drive", "gravity propulsion", "reactionless drive", "gravity ship"], "targets": {"allowed_types": ["Gravity Generator"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_gravity_generator"}, "parameters": [{"name": "drive_name", "type": "text", "required": true, "validation": "drive_name_format"}, {"name": "artificial_mass_blocks", "type": "block_reference_array", "required": true, "validation": "artificial_mass_exists"}, {"name": "thrust_direction", "type": "enum", "values": ["Forward", "Reverse", "Up", "Down", "Left", "Right"], "required": true, "validation": "thrust_direction_valid"}, {"name": "drive_strength", "type": "float", "range": {"min": 0.1, "max": 1.0}, "units": "g", "default": 0.8, "required": false, "validation": "drive_strength_range"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Gravity Generator", "Gravity Drive"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateGravityDrive(name, generators, mass_blocks, direction, strength)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Gravity generators must exist", "Artificial mass blocks must exist", "Drive name must be unique", "Components must be properly positioned", "User must have automation authority"], "effects": ["Gravity drive system created", "Reactionless propulsion configured", "Thrust-free movement capability", "Advanced propulsion activated"], "constraints": {"power_required_mw": 1.5, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 20000, "instruction_cost": 150}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_gravity_generator(target)", "validate_drive_name_unique(drive_name)", "check_artificial_mass_blocks_exist(artificial_mass_blocks)", "validate_thrust_direction(thrust_direction)", "validate_drive_strength_range(drive_strength)", "check_gravity_drive_component_positioning(target, artificial_mass_blocks)", "check_automation_authority()"], "error_cases": [{"condition": "drive_name_exists", "message": "Gravity drive '{drive_name}' already exists", "recovery": "Choose a different drive name"}, {"condition": "artificial_mass_not_found", "message": "Artificial mass blocks not found: {artificial_mass_blocks}", "recovery": "Check artificial mass block names and existence"}, {"condition": "invalid_thrust_direction", "message": "Invalid thrust direction '{thrust_direction}'", "recovery": "Use Forward, Reverse, Up, Down, Left, or Right"}, {"condition": "drive_strength_invalid", "message": "Drive strength {drive_strength}g invalid", "recovery": "Use drive strength between 0.1g and 1.0g"}, {"condition": "component_positioning_invalid", "message": "Gravity drive components not properly positioned", "recovery": "Position gravity generators and artificial mass for effective drive"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create gravity drive Forward Drive generators Main Gravity mass Mass Block 1 Mass Block 2 direction Forward", "parsed": {"verb": "create_gravity_drive", "target": {"zone": "propulsion"}, "parameters": {"drive_name": "Forward Drive", "artificial_mass_blocks": ["Mass Block 1", "Mass Block 2"], "thrust_direction": "Forward", "drive_strength": 0.8}}}, {"input": "gravity propulsion system", "parsed": {"verb": "create_gravity_drive", "target": {"name": "drive gravity"}, "parameters": {"drive_name": "Reactionless Drive", "artificial_mass_blocks": ["Drive Mass"], "thrust_direction": "Up", "drive_strength": 0.6}}}], "synonyms": ["gravity propulsion", "reactionless drive", "gravity ship"], "tags": ["environmental", "automation", "gravity_drive", "propulsion"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Power/Gravity_Generator__part-002.md", "sections": ["Gravity Drive"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Artificial_Mass.md", "sections": ["Gravity Drive"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "environmental.optimize_gravity_fields.grid.v1", "title": "Optimize gravity field configuration", "category": "environmental", "verb": "optimize_gravity_fields", "natural_language_triggers": ["optimize gravity fields", "gravity optimization", "improve gravity efficiency", "gravity field optimization"], "targets": {"allowed_types": ["Grid"], "allowed_selectors": ["current"], "grid_scope": ["current", "connected"], "multi_target": false, "target_validation": "must_be_current_grid"}, "parameters": [{"name": "optimization_goal", "type": "enum", "values": ["Power_Efficiency", "Coverage", "Uniformity", "Balanced"], "required": false, "default": "Balanced", "validation": "optimization_goal_valid"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Gravity", "Optimization"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "OptimizeGravityFields(optimization_goal)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": false}, "preconditions": ["Grid must exist", "Grid must have gravity generators", "User must have control authority"], "effects": ["Gravity fields optimized", "Power efficiency improved", "Coverage areas balanced", "Field overlap minimized"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 10000, "instruction_cost": 40}, "validation_hooks": ["check_grid_access()", "check_gravity_generators_exist()", "validate_optimization_goal(optimization_goal)", "check_user_authority_grid()"], "error_cases": [{"condition": "no_gravity_generators", "message": "No gravity generators found on grid", "recovery": "Build gravity generators for optimization"}, {"condition": "optimization_goal_invalid", "message": "Invalid optimization goal '{optimization_goal}'", "recovery": "Use Power_Efficiency, Coverage, Uniformity, or Balanced"}, {"condition": "optimization_failed", "message": "Gravity field optimization failed", "recovery": "Check gravity generator configuration"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "optimize gravity fields for power efficiency", "parsed": {"verb": "optimize_gravity_fields", "target": {"type": "grid", "selector": "current"}, "parameters": {"optimization_goal": "Power_Efficiency"}}}, {"input": "gravity field optimization", "parsed": {"verb": "optimize_gravity_fields", "target": {"type": "grid", "selector": "current"}, "parameters": {"optimization_goal": "Coverage"}}}], "synonyms": ["gravity optimization", "improve gravity efficiency", "gravity field optimization"], "tags": ["environmental", "optimization", "gravity", "efficiency"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Power/Gravity_Generator__part-002.md", "sections": ["Optimization"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}