{"id": "automation.create_automation_sequence.automation.v1", "title": "Create complex automation sequence", "category": "automation", "verb": "create_automation_sequence", "natural_language_triggers": ["create automation sequence", "automation chain", "complex automation", "sequence automation"], "targets": {"allowed_types": ["Timer Block"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_timer"}, "parameters": [{"name": "sequence_name", "type": "text", "required": true, "validation": "sequence_name_format"}, {"name": "automation_steps", "type": "automation_step_array", "required": true, "validation": "automation_steps_valid"}, {"name": "loop_sequence", "type": "boolean", "required": false, "default": false, "validation": "boolean"}, {"name": "emergency_stop_condition", "type": "text", "required": false, "validation": "condition_format"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Timer", "Automation Sequence"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateAutomationSequence(name, timers, steps, loop, emergency_stop)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Timers must exist", "Sequence name must be unique", "Automation steps must be valid", "Referenced blocks must exist", "User must have automation authority"], "effects": ["Complex automation sequence created", "Multi-step automation configured", "Timer chain established", "Advanced automation activated"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 15000, "instruction_cost": 100}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_timer(target)", "validate_sequence_name_unique(sequence_name)", "validate_automation_steps(automation_steps)", "check_automation_step_blocks_exist(automation_steps)", "validate_emergency_stop_condition(emergency_stop_condition)", "check_automation_authority()"], "error_cases": [{"condition": "sequence_name_exists", "message": "Automation sequence '{sequence_name}' already exists", "recovery": "Choose a different sequence name"}, {"condition": "invalid_automation_steps", "message": "Invalid automation steps specified", "recovery": "Configure valid automation steps with actions and delays"}, {"condition": "automation_blocks_not_found", "message": "Blocks referenced in automation steps not found", "recovery": "Ensure all referenced blocks exist"}, {"condition": "emergency_stop_invalid", "message": "Invalid emergency stop condition", "recovery": "Use valid condition format for emergency stop"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create automation sequence Airlock Cycle steps depressurize:5,open_outer:2,close_outer:10,pressurize:20", "parsed": {"verb": "create_automation_sequence", "target": {"zone": "airlock"}, "parameters": {"sequence_name": "Airlock Cycle", "automation_steps": ["depressurize:5", "open_outer:2", "close_outer:10", "pressurize:20"], "loop_sequence": false}}}, {"input": "complex automation Mining Operation", "parsed": {"verb": "create_automation_sequence", "target": {"name": "mining timers"}, "parameters": {"sequence_name": "Mining Operation", "automation_steps": ["extend_drill:3", "start_drill:5", "drill_cycle:60", "retract_drill:10"], "loop_sequence": true, "emergency_stop_condition": "power_low"}}}], "synonyms": ["automation chain", "complex automation", "sequence automation"], "tags": ["automation", "sequence", "complex", "chain"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Timer_Block__part-001.md", "sections": ["Complex Automation", "Sequences"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_conditional_automation.event_controller.v1", "title": "Create conditional automation system", "category": "automation", "verb": "create_conditional_automation", "natural_language_triggers": ["create conditional automation", "if-then automation", "conditional system", "smart automation"], "targets": {"allowed_types": ["Event Controller"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_event_controller"}, "parameters": [{"name": "system_name", "type": "text", "required": true, "validation": "system_name_format"}, {"name": "monitored_blocks", "type": "block_reference_array", "required": true, "validation": "blocks_exist"}, {"name": "conditions", "type": "condition_array", "required": true, "validation": "conditions_valid"}, {"name": "actions", "type": "conditional_action_array", "required": true, "validation": "conditional_actions_valid"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Event Controller", "Conditional System"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateConditionalAutomation(name, event_controllers, blocks, conditions, actions)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Event controllers must exist", "Monitored blocks must exist", "System name must be unique", "Conditions and actions must be valid", "User must have automation authority"], "effects": ["Conditional automation system created", "Smart monitoring activated", "If-then logic configured", "Responsive automation enabled"], "constraints": {"power_required_mw": 0.005, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 12000, "instruction_cost": 80}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_event_controller(target)", "validate_system_name_unique(system_name)", "check_monitored_blocks_exist(monitored_blocks)", "validate_conditions(conditions)", "validate_conditional_actions(actions)", "check_automation_authority()"], "error_cases": [{"condition": "system_name_exists", "message": "Conditional automation '{system_name}' already exists", "recovery": "Choose a different system name"}, {"condition": "monitored_blocks_not_found", "message": "Monitored blocks not found: {monitored_blocks}", "recovery": "Check monitored block names and existence"}, {"condition": "invalid_conditions", "message": "Invalid conditions specified", "recovery": "Configure valid monitoring conditions"}, {"condition": "invalid_actions", "message": "Invalid conditional actions specified", "recovery": "Configure valid if-then action responses"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create conditional automation Power Management blocks Main Battery conditions battery_low:25% actions enable_reactor", "parsed": {"verb": "create_conditional_automation", "target": {"zone": "power"}, "parameters": {"system_name": "Power Management", "monitored_blocks": ["Main Battery"], "conditions": ["battery_low:25%"], "actions": ["battery_low:enable_reactor"]}}}, {"input": "if-then automation Security System", "parsed": {"verb": "create_conditional_automation", "target": {"name": "security events"}, "parameters": {"system_name": "Security System", "monitored_blocks": ["Security Sensor"], "conditions": ["player_detected:enemy"], "actions": ["player_detected:close_doors,enable_turrets"]}}}], "synonyms": ["if-then automation", "conditional system", "smart automation"], "tags": ["automation", "conditional", "smart", "monitoring"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Event_Controller__part-001.md", "sections": ["Conditional Automation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_script_automation.programmable_block.v1", "title": "Create script-based automation system", "category": "automation", "verb": "create_script_automation", "natural_language_triggers": ["create script automation", "script automation system", "advanced automation", "programmable automation"], "targets": {"allowed_types": ["Programmable Block"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_programmable_block"}, "parameters": [{"name": "automation_name", "type": "text", "required": true, "validation": "automation_name_format"}, {"name": "script_type", "type": "enum", "values": ["Mining", "Production", "Defense", "Navigation", "Custom"], "required": true, "validation": "script_type_valid"}, {"name": "managed_blocks", "type": "block_reference_array", "required": true, "validation": "blocks_exist"}, {"name": "automation_config", "type": "text", "required": false, "validation": "config_format", "description": "Configuration string for script"}, {"name": "auto_run", "type": "boolean", "required": false, "default": false, "validation": "boolean"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Programmable Block", "Script Automation"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateScriptAutomation(name, programmable_blocks, script_type, managed_blocks, config, auto_run)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Programmable blocks must exist", "Managed blocks must exist", "Automation name must be unique", "Script type must be valid", "User must have automation authority"], "effects": ["Script automation system created", "Advanced automation logic configured", "Programmable control activated", "Custom automation behavior enabled"], "constraints": {"power_required_mw": 0.02, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 20000, "instruction_cost": 120}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_programmable_block(target)", "validate_automation_name_unique(automation_name)", "validate_script_type(script_type)", "check_managed_blocks_exist(managed_blocks)", "validate_automation_config(automation_config)", "check_automation_authority()"], "error_cases": [{"condition": "automation_name_exists", "message": "Script automation '{automation_name}' already exists", "recovery": "Choose a different automation name"}, {"condition": "invalid_script_type", "message": "Invalid script type '{script_type}'", "recovery": "Use Mining, Production, Defense, Navigation, or Custom"}, {"condition": "managed_blocks_not_found", "message": "Managed blocks not found: {managed_blocks}", "recovery": "Check managed block names and existence"}, {"condition": "automation_config_invalid", "message": "Invalid automation configuration", "recovery": "Use valid configuration format for script automation"}, {"condition": "scripts_disabled", "message": "In-game scripts are disabled", "recovery": "Enable in-game scripts in world settings"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create script automation Mining Control type Mining blocks Drill Piston Mining Collector config auto_depth:50", "parsed": {"verb": "create_script_automation", "target": {"zone": "mining"}, "parameters": {"automation_name": "Mining Control", "script_type": "Mining", "managed_blocks": ["Drill", "Piston", "Mining Collector"], "automation_config": "auto_depth:50", "auto_run": true}}}, {"input": "advanced automation Defense System", "parsed": {"verb": "create_script_automation", "target": {"name": "defense computer"}, "parameters": {"automation_name": "Defense System", "script_type": "Defense", "managed_blocks": ["Turret 1", "Turret 2", "Shield Generator"], "auto_run": false}}}], "synonyms": ["script automation system", "advanced automation", "programmable automation"], "tags": ["automation", "programmable", "script", "advanced"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Programmable_Block__part-001.md", "sections": ["Automation Systems"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.emergency_stop_automation.emergency.v1", "title": "Emergency stop all automation", "category": "automation", "verb": "emergency_stop_automation", "natural_language_triggers": ["emergency stop automation", "halt all automation", "automation emergency", "stop all scripts"], "targets": {"allowed_types": ["Grid"], "allowed_selectors": ["current"], "grid_scope": ["current", "connected"], "multi_target": false, "target_validation": "must_be_current_grid"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Emergency_Stop_Automation"], "terminal_path": ["Terminal", "Automation", "Emergency Stop"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "EmergencyStopAllAutomation()"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Grid must exist", "Grid must have automation systems", "Emergency condition active", "User must have emergency authority"], "effects": ["All timers stopped", "All event controllers disabled", "All scripts halted", "Automation systems emergency shutdown"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "emergency_or_admin", "execution_time_ms": 2000, "instruction_cost": 50}, "validation_hooks": ["check_grid_access()", "check_automation_systems_exist()", "check_emergency_condition()", "check_emergency_authority()"], "error_cases": [{"condition": "no_automation_systems", "message": "No automation systems found on grid", "recovery": "No automation to emergency stop"}, {"condition": "no_emergency_condition", "message": "Emergency stop only available during emergency", "recovery": "Emergency protocols require crisis condition"}, {"condition": "no_emergency_authority", "message": "Emergency stop requires admin or emergency authority", "recovery": "Emergency protocols require elevated permissions"}], "safety_class": "emergency", "idempotent": true, "reversible": true, "examples": [{"input": "emergency stop automation", "parsed": {"verb": "emergency_stop_automation", "target": {"type": "grid", "selector": "current"}}}, {"input": "halt all automation", "parsed": {"verb": "emergency_stop_automation", "target": {"type": "grid", "selector": "current"}}}], "synonyms": ["halt all automation", "automation emergency", "stop all scripts"], "tags": ["automation", "emergency", "stop", "halt"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Timer_Block__part-001.md", "sections": ["Emergency Procedures"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.create_maintenance_cycle.automation.v1", "title": "Create automated maintenance cycle", "category": "automation", "verb": "create_maintenance_cycle", "natural_language_triggers": ["create maintenance cycle", "maintenance automation", "scheduled maintenance", "auto maintenance"], "targets": {"allowed_types": ["Timer Block"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_timer"}, "parameters": [{"name": "cycle_name", "type": "text", "required": true, "validation": "cycle_name_format"}, {"name": "maintenance_interval", "type": "float", "range": {"min": 300.0, "max": 86400.0}, "units": "seconds", "default": 3600.0, "required": false, "validation": "interval_range"}, {"name": "maintenance_actions", "type": "action_array", "required": true, "validation": "actions_exist"}, {"name": "condition_checks", "type": "condition_array", "required": false, "validation": "conditions_valid"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Timer", "Maintenance Cycle"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateMaintenanceCycle(name, timers, interval, actions, conditions)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Timers must exist", "Cycle name must be unique", "Maintenance actions must be valid", "User must have automation authority"], "effects": ["Maintenance cycle created", "Scheduled maintenance configured", "Automatic system care activated", "Preventive maintenance enabled"], "constraints": {"power_required_mw": 0.005, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 10000, "instruction_cost": 70}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_timer(target)", "validate_cycle_name_unique(cycle_name)", "validate_maintenance_interval(maintenance_interval)", "validate_actions_exist(maintenance_actions)", "validate_conditions_valid(condition_checks)", "check_automation_authority()"], "error_cases": [{"condition": "cycle_name_exists", "message": "Maintenance cycle '{cycle_name}' already exists", "recovery": "Choose a different cycle name"}, {"condition": "maintenance_interval_invalid", "message": "Maintenance interval {maintenance_interval}s invalid", "recovery": "Use interval between 5 minutes and 24 hours"}, {"condition": "invalid_maintenance_actions", "message": "Invalid maintenance actions specified", "recovery": "Use valid block actions for maintenance"}, {"condition": "condition_checks_invalid", "message": "Invalid condition checks specified", "recovery": "Use valid condition formats for checks"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create maintenance cycle System Check interval 3600 actions check_power,check_thrusters,check_life_support", "parsed": {"verb": "create_maintenance_cycle", "target": {"zone": "maintenance"}, "parameters": {"cycle_name": "System Check", "maintenance_interval": 3600.0, "maintenance_actions": ["check_power", "check_thrusters", "check_life_support"]}}}, {"input": "scheduled maintenance Auto Care", "parsed": {"verb": "create_maintenance_cycle", "target": {"name": "maintenance timer"}, "parameters": {"cycle_name": "Auto Care", "maintenance_interval": 7200.0, "maintenance_actions": ["repair_systems", "optimize_power"], "condition_checks": ["damage_threshold:80%"]}}}], "synonyms": ["maintenance automation", "scheduled maintenance", "auto maintenance"], "tags": ["automation", "maintenance", "scheduled", "care"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Timer_Block__part-001.md", "sections": ["Maintenance Automation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.get_automation_performance.grid.v1", "title": "Get automation system performance", "category": "automation", "verb": "get_automation_performance", "natural_language_triggers": ["get automation performance", "automation efficiency", "system performance", "automation status"], "targets": {"allowed_types": ["Grid"], "allowed_selectors": ["current"], "grid_scope": ["current", "connected"], "multi_target": false, "target_validation": "must_be_current_grid"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Info", "Automation Performance"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "GetAutomationPerformance()"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Grid must exist", "Grid must have automation systems", "User must have view authority"], "effects": ["Returns automation performance metrics", "Returns efficiency statistics", "Returns active automation count", "Returns resource usage", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 10, "instruction_cost": 8}, "validation_hooks": ["check_grid_access()", "check_automation_systems_exist()", "check_view_authority_grid()"], "error_cases": [{"condition": "no_automation_systems", "message": "No automation systems found on grid", "recovery": "Build automation blocks for performance analysis"}, {"condition": "performance_analysis_failed", "message": "Automation performance analysis failed", "recovery": "Check automation system configuration"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "check automation performance", "parsed": {"verb": "get_automation_performance", "target": {"type": "grid", "selector": "current"}}}, {"input": "automation efficiency status", "parsed": {"verb": "get_automation_performance", "target": {"type": "grid", "selector": "current"}}}], "synonyms": ["automation efficiency", "system performance", "automation status"], "tags": ["automation", "monitoring", "performance", "efficiency"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/", "sections": ["Automation Performance"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}