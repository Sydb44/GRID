{"id": "automation.configure_event_condition.event_controller.v1", "title": "Configure event controller condition", "category": "automation", "verb": "configure_event_condition", "natural_language_triggers": ["configure event condition", "set event trigger", "event condition", "condition setup"], "targets": {"allowed_types": ["Event Controller"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_event_controller"}, "parameters": [{"name": "threshold", "type": "float", "required": true, "validation": "threshold_range", "terminal_name": "Threshold", "description": "Trigger threshold value"}, {"name": "condition_type", "type": "enum", "values": ["Lower_Or_Equal", "Higher_Or_Equal"], "required": false, "default": "Higher_Or_Equal", "validation": "condition_type_valid"}, {"name": "and_mode", "type": "boolean", "required": false, "default": false, "validation": "boolean", "description": "All blocks must meet condition (AND) vs any block (OR)"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Event Controller", "Condition"], "modapi_calls": [{"interface": "IMyEventControllerBlock", "property": "Threshold", "method": "set_Threshold(float threshold)"}, {"interface": "IMyEventControllerBlock", "property": "IsLowerOrEqualCondition", "method": "set_IsLowerOrEqualCondition(bool lower)"}, {"interface": "IMyEventControllerBlock", "property": "IsAndModeEnabled", "method": "set_IsAndModeEnabled(bool and_mode)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": false}, "preconditions": ["Event controller must exist", "Event controller must be functional", "Threshold must be valid", "User must have control authority"], "effects": ["Event condition configured", "Trigger threshold set", "Logic mode configured", "Automation trigger ready"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1000, "instruction_cost": 15}, "validation_hooks": ["check_block_exists(target)", "check_block_type_event_controller(target)", "check_block_functional(target)", "validate_threshold_range(threshold)", "validate_condition_type(condition_type)", "check_user_authority(target)"], "error_cases": [{"condition": "event_controller_not_found", "message": "No event controllers matching '{target}' found", "recovery": "List available event controllers"}, {"condition": "threshold_invalid", "message": "Threshold value {threshold} invalid", "recovery": "Use valid threshold value for event condition"}, {"condition": "condition_type_invalid", "message": "Invalid condition type '{condition_type}'", "recovery": "Use Lower_Or_Equal or Higher_Or_Equal"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "configure event condition threshold 75 higher or equal", "parsed": {"verb": "configure_event_condition", "target": {"name": "power monitor"}, "parameters": {"threshold": 75.0, "condition_type": "Higher_Or_Equal"}}}, {"input": "set event trigger 50% AND mode", "parsed": {"verb": "configure_event_condition", "target": {"type": "event_controller"}, "parameters": {"threshold": 50.0, "and_mode": true}}}], "synonyms": ["set event trigger", "event condition", "condition setup"], "tags": ["automation", "event_controller", "condition", "trigger"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Events/IMyEventControllerBlock.md", "sections": ["Properties", "Conditions"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Event_Controller__part-002.md", "sections": ["Conditions"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.configure_event_actions.event_controller.v1", "title": "Configure event controller actions", "category": "automation", "verb": "configure_event_actions", "natural_language_triggers": ["configure event actions", "set event actions", "event response", "action setup"], "targets": {"allowed_types": ["Event Controller"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_event_controller"}, "parameters": [{"name": "trigger_action", "type": "action_reference", "required": false, "validation": "action_exists", "description": "Action when condition is met"}, {"name": "reset_action", "type": "action_reference", "required": false, "validation": "action_exists", "description": "Action when condition is no longer met"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Event Controller", "Setup Actions"], "modapi_calls": [{"interface": "IMyEventControllerBlock", "method": "SetTriggerAction(action)"}, {"interface": "IMyEventControllerBlock", "method": "SetResetAction(action)"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Event controller must exist", "Event controller must be functional", "Actions must be valid", "Target blocks for actions must exist", "User must have control authority"], "effects": ["Event actions configured", "Trigger response set", "Reset behavior defined", "Automation response ready"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 2000, "instruction_cost": 20}, "validation_hooks": ["check_block_exists(target)", "check_block_type_event_controller(target)", "check_block_functional(target)", "validate_action_exists(trigger_action)", "validate_action_exists(reset_action)", "check_action_target_blocks_exist(trigger_action, reset_action)", "check_user_authority(target)"], "error_cases": [{"condition": "event_controller_not_found", "message": "No event controllers matching '{target}' found", "recovery": "List available event controllers"}, {"condition": "invalid_action", "message": "Invalid action specified for event controller", "recovery": "Use valid block action from available actions"}, {"condition": "action_target_not_found", "message": "Target block for action not found", "recovery": "Ensure target blocks exist for actions"}, {"condition": "no_actions_specified", "message": "No actions specified for event controller", "recovery": "Specify at least one trigger or reset action"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "configure event actions trigger enable_turrets reset disable_turrets", "parsed": {"verb": "configure_event_actions", "target": {"name": "threat detector"}, "parameters": {"trigger_action": "enable_turrets", "reset_action": "disable_turrets"}}}, {"input": "set event response open doors", "parsed": {"verb": "configure_event_actions", "target": {"type": "event_controller"}, "parameters": {"trigger_action": "open_door:main_door"}}}], "synonyms": ["set event actions", "event response", "action setup"], "tags": ["automation", "event_controller", "actions", "response"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Event_Controller__part-002.md", "sections": ["Actions Setup"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.enable_event_controller.event_controller.v1", "title": "Enable event controller", "category": "automation", "verb": "enable_event_controller", "natural_language_triggers": ["enable event controller", "turn on event controller", "activate events", "start monitoring"], "targets": {"allowed_types": ["Event Controller"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_event_controller"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_On"], "terminal_path": ["Terminal", "Event Controller", "On/Off"], "modapi_calls": [{"interface": "IMyEventControllerBlock", "property": "Enabled", "method": "set_Enabled(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Event controller must exist", "Event controller must be functional", "Event controller must be powered", "Event and actions should be configured", "User must have control authority"], "effects": ["Event controller enabled", "Event monitoring begins", "Automation triggers activated", "Condition checking starts"], "constraints": {"power_required_mw": 0.0001, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1000, "instruction_cost": 10}, "validation_hooks": ["check_block_exists(target)", "check_block_type_event_controller(target)", "check_block_functional(target)", "check_block_powered(target)", "check_event_controller_configured(target)", "check_user_authority(target)"], "error_cases": [{"condition": "event_controller_not_found", "message": "No event controllers matching '{target}' found", "recovery": "List available event controllers"}, {"condition": "event_controller_unpowered", "message": "Event controller '{target}' has no power", "recovery": "Check power grid and connections"}, {"condition": "event_not_configured", "message": "Event controller '{target}' has no event or actions configured", "recovery": "Configure event and actions before enabling"}, {"condition": "event_controller_not_functional", "message": "Event controller '{target}' is not functional", "recovery": "Check event controller condition"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "enable power monitor events", "parsed": {"verb": "enable_event_controller", "target": {"name": "power monitor"}}}, {"input": "start monitoring systems", "parsed": {"verb": "enable_event_controller", "target": {"type": "event_controller", "selector": "all"}}}], "synonyms": ["turn on event controller", "activate events", "start monitoring"], "tags": ["automation", "event_controller", "enable", "monitoring"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Events/IMyEventControllerBlock.md", "sections": ["Properties"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Event_Controller__part-001.md", "sections": ["Usage"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "automation.disable_event_controller.event_controller.v1", "title": "Disable event controller", "category": "automation", "verb": "disable_event_controller", "natural_language_triggers": ["disable event controller", "turn off event controller", "deactivate events", "stop monitoring"], "targets": {"allowed_types": ["Event Controller"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_event_controller"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_Off"], "terminal_path": ["Terminal", "Event Controller", "On/Off"], "modapi_calls": [{"interface": "IMyEventControllerBlock", "property": "Enabled", "method": "set_Enabled(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Event controller must exist", "User must have control authority"], "effects": ["Event controller disabled", "Event monitoring stops", "Automation triggers deactivated", "Condition checking halted"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 500, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_event_controller(target)", "check_user_authority(target)"], "error_cases": [{"condition": "event_controller_not_found", "message": "No event controllers matching '{target}' found", "recovery": "List available event controllers"}, {"condition": "event_controller_already_off", "message": "Event controller '{target}' is already disabled", "recovery": "Event controller is not currently active"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "disable security events", "parsed": {"verb": "disable_event_controller", "target": {"name": "security events"}}}, {"input": "stop monitoring", "parsed": {"verb": "disable_event_controller", "target": {"type": "event_controller", "selector": "all"}}}], "synonyms": ["turn off event controller", "deactivate events", "stop monitoring"], "tags": ["automation", "event_controller", "disable", "stop"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Events/IMyEventControllerBlock.md", "sections": ["Properties"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}