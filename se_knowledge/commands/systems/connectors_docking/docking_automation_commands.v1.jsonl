{"id": "docking.create_docking_sequence.automation.v1", "title": "Create automated docking sequence", "category": "connectors_docking", "verb": "create_docking_sequence", "natural_language_triggers": ["create docking sequence", "automated docking", "docking automation", "dock sequence"], "targets": {"allowed_types": ["Connector"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": false, "target_validation": "must_be_connector"}, "parameters": [{"name": "sequence_name", "type": "text", "required": true, "validation": "sequence_name_format"}, {"name": "approach_thrusters", "type": "block_reference_array", "required": false, "validation": "thrusters_exist"}, {"name": "docking_lights", "type": "block_reference_array", "required": false, "validation": "lights_exist"}, {"name": "safety_sensors", "type": "block_reference_array", "required": false, "validation": "sensors_exist"}, {"name": "post_dock_actions", "type": "action_array", "required": false, "validation": "actions_exist"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Connector", "Docking Sequence"], "modapi_calls": [{"interface": "IMyShipConnector", "method": "CreateDockingSequence(name, thrusters, lights, sensors, actions)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Connector must exist", "Sequence name must be unique", "Referenced blocks must exist if specified", "User must have automation authority"], "effects": ["Docking sequence created", "Automated docking process configured", "Approach guidance activated", "Post-dock automation enabled"], "constraints": {"power_required_mw": 0.005, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 8000, "instruction_cost": 60}, "validation_hooks": ["check_block_exists(target)", "check_block_type_connector(target)", "validate_sequence_name_unique(sequence_name)", "check_thrusters_exist_optional(approach_thrusters)", "check_lights_exist_optional(docking_lights)", "check_sensors_exist_optional(safety_sensors)", "validate_actions_exist(post_dock_actions)", "check_automation_authority()"], "error_cases": [{"condition": "sequence_name_exists", "message": "Docking sequence '{sequence_name}' already exists", "recovery": "Choose a different sequence name"}, {"condition": "thrusters_not_found", "message": "Approach thrusters not found: {approach_thrusters}", "recovery": "Check thruster names or remove from sequence"}, {"condition": "lights_not_found", "message": "Docking lights not found: {docking_lights}", "recovery": "Check light names or remove from sequence"}, {"condition": "sensors_not_found", "message": "Safety sensors not found: {safety_sensors}", "recovery": "Check sensor names or remove from sequence"}, {"condition": "invalid_actions", "message": "Invalid post-dock actions specified", "recovery": "Use valid block actions for post-dock automation"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create docking sequence Station Approach connector Main Dock lights Approach Lights actions disable_dampeners", "parsed": {"verb": "create_docking_sequence", "target": {"name": "Main Dock"}, "parameters": {"sequence_name": "Station Approach", "docking_lights": ["Approach Lights"], "post_dock_actions": ["disable_dampeners", "set_battery_recharge"]}}}, {"input": "automated docking with safety", "parsed": {"verb": "create_docking_sequence", "target": {"zone": "docking"}, "parameters": {"sequence_name": "Safe Dock", "approach_thrusters": ["Docking Thrusters"], "safety_sensors": ["Proximity Sensor"], "post_dock_actions": ["stop_thrusters"]}}}], "synonyms": ["automated docking", "docking automation", "dock sequence"], "tags": ["docking", "automation", "sequence", "approach"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Docking__part-002.md", "sections": ["Automation", "Post-Docking"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "docking.execute_parking_protocol.ship_controller.v1", "title": "Execute parking protocol", "category": "connectors_docking", "verb": "execute_parking_protocol", "natural_language_triggers": ["execute parking protocol", "parking mode", "dock and park", "secure ship"], "targets": {"allowed_types": ["Remote Control", "Cockpit", "Fighter Cockpit", "Control Station"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_ship_controller"}, "parameters": [{"name": "parking_mode", "type": "enum", "values": ["Landing", "Docking", "Magnetic", "Emergency"], "required": false, "default": "Docking", "validation": "parking_mode_valid"}], "se_implementation": {"toolbar_actions": ["Parking"], "terminal_path": ["Terminal", "Ship Controller", "Parking"], "modapi_calls": [{"interface": "IMyShipController", "method": "ExecuteParkingProtocol(parking_mode)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Ship controller must exist", "Ship controller must be functional", "Appropriate attachment blocks must exist", "User must have control authority"], "effects": ["Parking protocol executed", "Connectors/landing gear locked", "Thrusters and dampeners disabled", "Ship secured for parking"], "constraints": {"power_required_mw": 0.002, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 5000, "instruction_cost": 25}, "validation_hooks": ["check_block_exists(target)", "check_block_type_ship_controller(target)", "check_block_functional(target)", "validate_parking_mode(parking_mode)", "check_parking_blocks_available(target, parking_mode)", "check_user_authority(target)"], "error_cases": [{"condition": "ship_controller_not_found", "message": "No ship controllers matching '{target}' found", "recovery": "List available ship controllers"}, {"condition": "no_parking_blocks", "message": "No {parking_mode} blocks available for parking", "recovery": "Build appropriate attachment blocks for parking mode"}, {"condition": "parking_mode_invalid", "message": "Invalid parking mode '{parking_mode}'", "recovery": "Use Landing, Docking, Magnetic, or Emergency"}, {"condition": "parking_already_active", "message": "Ship is already in parking mode", "recovery": "Ship is already parked"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "execute parking protocol", "parsed": {"verb": "execute_parking_protocol", "target": {"type": "cockpit"}}}, {"input": "dock and park in docking mode", "parsed": {"verb": "execute_parking_protocol", "target": {"name": "main control"}, "parameters": {"parking_mode": "Docking"}}}], "synonyms": ["parking mode", "dock and park", "secure ship"], "tags": ["docking", "parking", "automation", "securing"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Flight/Cockpit_Controls__part-001.md", "sections": ["Parking Toggle"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Docking__part-002.md", "sections": ["Post-Docking"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "docking.execute_undocking_protocol.ship_controller.v1", "title": "Execute undocking protocol", "category": "connectors_docking", "verb": "execute_undocking_protocol", "natural_language_triggers": ["execute undocking protocol", "undock and depart", "departure sequence", "undocking sequence"], "targets": {"allowed_types": ["Remote Control", "Cockpit", "Fighter Cockpit", "Control Station"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_ship_controller"}, "parameters": [{"name": "departure_mode", "type": "enum", "values": ["Safe", "Quick", "Emergency"], "required": false, "default": "Safe", "validation": "departure_mode_valid"}, {"name": "post_undock_actions", "type": "action_array", "required": false, "validation": "actions_exist"}], "se_implementation": {"toolbar_actions": ["Undocking"], "terminal_path": ["Terminal", "Ship Controller", "Undocking"], "modapi_calls": [{"interface": "IMyShipController", "method": "ExecuteUndockingProtocol(departure_mode, actions)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Ship controller must exist", "Ship controller must be functional", "Ship must be docked", "User must have control authority"], "effects": ["Undocking protocol executed", "All attachments disconnected", "Thrusters and dampeners enabled", "Departure readiness achieved"], "constraints": {"power_required_mw": 0.005, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 8000, "instruction_cost": 30}, "validation_hooks": ["check_block_exists(target)", "check_block_type_ship_controller(target)", "check_block_functional(target)", "check_ship_docked(target)", "validate_departure_mode(departure_mode)", "validate_actions_exist(post_undock_actions)", "check_user_authority(target)"], "error_cases": [{"condition": "ship_controller_not_found", "message": "No ship controllers matching '{target}' found", "recovery": "List available ship controllers"}, {"condition": "ship_not_docked", "message": "Ship is not currently docked", "recovery": "Ship is already undocked"}, {"condition": "departure_mode_invalid", "message": "Invalid departure mode '{departure_mode}'", "recovery": "Use Safe, Quick, or Emergency"}, {"condition": "undocking_blocked", "message": "Undocking blocked by safety systems", "recovery": "Check safety sensors and clear departure path"}, {"condition": "insufficient_power", "message": "Insufficient power for undocking sequence", "recovery": "Ensure adequate power for thrusters and systems"}], "safety_class": "caution", "idempotent": false, "reversible": false, "examples": [{"input": "execute undocking protocol", "parsed": {"verb": "execute_undocking_protocol", "target": {"type": "cockpit"}}}, {"input": "departure sequence quick mode", "parsed": {"verb": "execute_undocking_protocol", "target": {"name": "main control"}, "parameters": {"departure_mode": "Quick", "post_undock_actions": ["enable_autopilot"]}}}], "synonyms": ["undock and depart", "departure sequence", "undocking sequence"], "tags": ["docking", "undocking", "departure", "automation"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Docking__part-001.md", "sections": ["Undocking Safety"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "docking.create_carrier_docking.automation.v1", "title": "Create carrier docking system", "category": "connectors_docking", "verb": "create_carrier_docking", "natural_language_triggers": ["create carrier docking", "carrier docking system", "hangar docking", "mothership docking"], "targets": {"allowed_types": ["Landing Gear"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_landing_gear"}, "parameters": [{"name": "system_name", "type": "text", "required": true, "validation": "system_name_format"}, {"name": "hangar_door", "type": "block_reference", "required": false, "validation": "door_exists"}, {"name": "approach_lights", "type": "block_reference_array", "required": false, "validation": "lights_exist"}, {"name": "docking_sensors", "type": "block_reference_array", "required": false, "validation": "sensors_exist"}, {"name": "auto_secure_small_ships", "type": "boolean", "required": false, "default": true, "validation": "boolean"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Landing Gear", "Carrier Docking"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateCarrierDocking(name, landing_gear, door, lights, sensors, auto_secure)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Landing gear must exist", "System name must be unique", "Referenced blocks must exist if specified", "Hangar area must be suitable", "User must have automation authority"], "effects": ["Carrier docking system created", "Small ship docking automation", "Hangar operations configured", "Approach guidance activated"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "automation_admin", "execution_time_ms": 10000, "instruction_cost": 70}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_landing_gear(target)", "validate_system_name_unique(system_name)", "check_door_exists_optional(hangar_door)", "check_lights_exist_optional(approach_lights)", "check_sensors_exist_optional(docking_sensors)", "validate_hangar_area_suitable(target)", "check_automation_authority()"], "error_cases": [{"condition": "system_name_exists", "message": "Carrier docking '{system_name}' already exists", "recovery": "Choose a different system name"}, {"condition": "hangar_door_not_found", "message": "Hangar door '{hangar_door}' not found", "recovery": "Check hangar door name or remove from configuration"}, {"condition": "hangar_area_unsuitable", "message": "Hangar area not suitable for carrier docking", "recovery": "Ensure adequate space and landing gear placement"}, {"condition": "no_automation_authority", "message": "No permission to create carrier docking systems", "recovery": "Automation requires elevated permissions"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create carrier docking Main Hangar with door Hangar Door lights Landing Lights", "parsed": {"verb": "create_carrier_docking", "target": {"zone": "hangar"}, "parameters": {"system_name": "Main Hangar", "hangar_door": "Hangar Door", "approach_lights": ["Landing Lights"], "auto_secure_small_ships": true}}}, {"input": "mothership docking system", "parsed": {"verb": "create_carrier_docking", "target": {"name": "docking gear"}, "parameters": {"system_name": "Mothership Dock", "docking_sensors": ["Approach Sensor"], "auto_secure_small_ships": true}}}], "synonyms": ["carrier docking system", "hangar docking", "mothership docking"], "tags": ["docking", "automation", "carrier", "hangar"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Docking__part-001.md", "sections": ["Carrier Docking"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "docking.enable_power_transfer.connector.v1", "title": "Enable connector power transfer", "category": "connectors_docking", "verb": "enable_power_transfer", "natural_language_triggers": ["enable power transfer", "share power", "power transfer on", "connect power systems"], "targets": {"allowed_types": ["Connector", "Small Connector", "Inset Connector"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_connector"}, "parameters": [], "se_implementation": {"toolbar_actions": ["PowerTransfer_On"], "terminal_path": ["Terminal", "Connector", "Power Transfer"], "modapi_calls": [{"interface": "IMyShipConnector", "property": "IsPowerTransferOverrideEnabled", "method": "set_IsPowerTransferOverrideEnabled(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Connector must exist", "Connector must be functional", "Connector must be connected", "User must have control authority"], "effects": ["Power transfer enabled", "Connected grids share power", "Battery charging possible", "Power system integration"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 8}, "validation_hooks": ["check_block_exists(target)", "check_block_type_connector(target)", "check_block_functional(target)", "check_connector_connected(target)", "check_user_authority(target)"], "error_cases": [{"condition": "connector_not_found", "message": "No connectors matching '{target}' found", "recovery": "List available connectors"}, {"condition": "connector_not_connected", "message": "Connector '{target}' is not connected", "recovery": "Connect to another connector first"}, {"condition": "power_transfer_already_enabled", "message": "Power transfer already enabled on '{target}'", "recovery": "Power transfer is already active"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "enable power transfer", "parsed": {"verb": "enable_power_transfer", "target": {"type": "connector"}}}, {"input": "share power with station", "parsed": {"verb": "enable_power_transfer", "target": {"name": "docking connector"}}}], "synonyms": ["share power", "power transfer on", "connect power systems"], "tags": ["docking", "power", "transfer", "sharing"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Logistics/Connector__part-003.md", "sections": ["Power Transfer"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "docking.disable_power_transfer.connector.v1", "title": "Disable connector power transfer", "category": "connectors_docking", "verb": "disable_power_transfer", "natural_language_triggers": ["disable power transfer", "isolate power", "power transfer off", "disconnect power systems"], "targets": {"allowed_types": ["Connector", "Small Connector", "Inset Connector"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_connector"}, "parameters": [], "se_implementation": {"toolbar_actions": ["PowerTransfer_Off"], "terminal_path": ["Terminal", "Connector", "Power Transfer"], "modapi_calls": [{"interface": "IMyShipConnector", "property": "IsPowerTransferOverrideEnabled", "method": "set_IsPowerTransferOverrideEnabled(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Connector must exist", "Connector must be functional", "User must have control authority"], "effects": ["Power transfer disabled", "Connected grids power isolated", "Independent power systems", "Power sharing stopped"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_connector(target)", "check_block_functional(target)", "check_user_authority(target)"], "error_cases": [{"condition": "connector_not_found", "message": "No connectors matching '{target}' found", "recovery": "List available connectors"}, {"condition": "power_transfer_already_disabled", "message": "Power transfer already disabled on '{target}'", "recovery": "Power transfer is already isolated"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "disable power transfer", "parsed": {"verb": "disable_power_transfer", "target": {"type": "connector"}}}, {"input": "isolate power systems", "parsed": {"verb": "disable_power_transfer", "target": {"name": "isolation connector"}}}], "synonyms": ["isolate power", "power transfer off", "disconnect power systems"], "tags": ["docking", "power", "isolation", "disconnect"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Logistics/Connector__part-003.md", "sections": ["Power Isolation"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "docking.emergency_undock_all.emergency.v1", "title": "Emergency undock all connections", "category": "connectors_docking", "verb": "emergency_undock_all", "natural_language_triggers": ["emergency undock all", "emergency detach", "emergency disconnect", "break all connections"], "targets": {"allowed_types": ["Grid"], "allowed_selectors": ["current"], "grid_scope": ["current"], "multi_target": false, "target_validation": "must_be_current_grid"}, "parameters": [{"name": "force_undock", "type": "boolean", "required": false, "default": true, "validation": "boolean", "description": "Force undocking even if unsafe"}], "se_implementation": {"toolbar_actions": ["Emergency_Undock"], "terminal_path": ["Terminal", "Docking", "Emergency Undock"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "EmergencyUndockAll(force_undock)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Grid must exist", "Grid must have docking connections", "Emergency condition active", "User must have emergency authority"], "effects": ["All docking connections severed", "Connectors disconnected", "Landing gear unlocked", "Emergency separation achieved"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "emergency_or_admin", "execution_time_ms": 3000, "instruction_cost": 50}, "validation_hooks": ["check_grid_access()", "check_docking_connections_exist()", "check_emergency_condition()", "check_emergency_authority()"], "error_cases": [{"condition": "no_docking_connections", "message": "No docking connections found on grid", "recovery": "No connections to emergency undock"}, {"condition": "no_emergency_condition", "message": "Emergency undock only available during emergency", "recovery": "Emergency protocols require crisis condition"}, {"condition": "no_emergency_authority", "message": "Emergency undock requires admin or emergency authority", "recovery": "Emergency protocols require elevated permissions"}, {"condition": "undock_failed", "message": "Some connections could not be emergency undocked", "recovery": "Check individual connection status"}], "safety_class": "emergency", "idempotent": false, "reversible": false, "examples": [{"input": "emergency undock all", "parsed": {"verb": "emergency_undock_all", "target": {"type": "grid", "selector": "current"}}}, {"input": "break all connections", "parsed": {"verb": "emergency_undock_all", "target": {"type": "grid", "selector": "current"}, "parameters": {"force_undock": true}}}], "synonyms": ["emergency detach", "emergency disconnect", "break all connections"], "tags": ["docking", "emergency", "undock", "disconnect"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Docking__part-001.md", "sections": ["Emergency Procedures"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}