{"id": "specialized.enable_decoy.decoy.v1", "title": "Enable decoy target", "category": "specialized", "verb": "enable_decoy", "natural_language_triggers": ["enable decoy", "turn on decoy", "activate decoy", "decoy on"], "targets": {"allowed_types": ["Decoy"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_decoy"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_On"], "terminal_path": ["Terminal", "Decoy", "On/Off"], "modapi_calls": [{"interface": "IMyDecoy", "property": "Enabled", "method": "set_Enabled(true)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Decoy must exist", "Decoy must be functional", "User must have control authority"], "effects": ["Decoy.Enabled = true", "Target priority increased", "Turret attraction activated", "Defense distraction enabled"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)", "check_block_type_decoy(target)", "check_block_functional(target)", "check_user_authority(target)"], "error_cases": [{"condition": "decoy_not_found", "message": "No decoys matching '{target}' found", "recovery": "List available decoys"}, {"condition": "decoy_already_on", "message": "Decoy '{target}' is already enabled", "recovery": "Decoy is already active"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "enable decoys for defense", "parsed": {"verb": "enable_decoy", "target": {"type": "decoy", "selector": "all"}}}, {"input": "activate decoy", "parsed": {"verb": "enable_decoy", "target": {"name": "main decoy"}}}], "synonyms": ["turn on decoy", "activate decoy", "decoy on"], "tags": ["specialized", "decoy", "defense", "distraction"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Decoy__part-001.md", "sections": ["Usage"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "specialized.disable_decoy.decoy.v1", "title": "Disable decoy target", "category": "specialized", "verb": "disable_decoy", "natural_language_triggers": ["disable decoy", "turn off decoy", "deactivate decoy", "decoy off"], "targets": {"allowed_types": ["Decoy"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone", "all"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_decoy"}, "parameters": [], "se_implementation": {"toolbar_actions": ["OnOff_Off"], "terminal_path": ["Terminal", "Decoy", "On/Off"], "modapi_calls": [{"interface": "IMyDecoy", "property": "Enabled", "method": "set_Enabled(false)"}], "group_compatible": true, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Decoy must exist", "User must have control authority"], "effects": ["Decoy.Enabled = false", "Target priority reduced", "Turret attraction deactivated", "Defense distraction disabled"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_decoy(target)", "check_user_authority(target)"], "error_cases": [{"condition": "decoy_not_found", "message": "No decoys matching '{target}' found", "recovery": "List available decoys"}, {"condition": "decoy_already_off", "message": "Decoy '{target}' is already disabled", "recovery": "Decoy is already inactive"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "disable decoys", "parsed": {"verb": "disable_decoy", "target": {"type": "decoy", "selector": "all"}}}, {"input": "turn off decoy", "parsed": {"verb": "disable_decoy", "target": {"name": "main decoy"}}}], "synonyms": ["turn off decoy", "deactivate decoy", "decoy off"], "tags": ["specialized", "decoy", "disable", "stop"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Decoy__part-001.md", "sections": ["Usage"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "specialized.create_emergency_systems.automation.v1", "title": "Create emergency response systems", "category": "specialized", "verb": "create_emergency_systems", "natural_language_triggers": ["create emergency systems", "emergency response", "crisis management", "emergency automation"], "targets": {"allowed_types": ["Timer Block"], "allowed_selectors": ["by_name", "by_zone"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_timer"}, "parameters": [{"name": "system_name", "type": "text", "required": true, "validation": "system_name_format"}, {"name": "emergency_types", "type": "emergency_type_array", "required": true, "validation": "emergency_types_valid"}, {"name": "response_actions", "type": "emergency_action_array", "required": true, "validation": "emergency_actions_valid"}, {"name": "escalation_levels", "type": "escalation_array", "required": false, "validation": "escalation_valid"}], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Timer", "Emergency Systems"], "modapi_calls": [{"interface": "IMyGridTerminalSystem", "method": "CreateEmergencySystems(name, timers, emergency_types, actions, escalation)"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Timers must exist", "System name must be unique", "Emergency types and actions must be valid", "User must have emergency authority"], "effects": ["Emergency response system created", "Crisis management automation", "Escalating response protocols", "Comprehensive emergency handling"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "emergency_admin", "execution_time_ms": 20000, "instruction_cost": 150}, "validation_hooks": ["check_blocks_exist(target)", "check_blocks_type_timer(target)", "validate_system_name_unique(system_name)", "validate_emergency_types(emergency_types)", "validate_emergency_actions(response_actions)", "validate_escalation_levels(escalation_levels)", "check_emergency_authority()"], "error_cases": [{"condition": "system_name_exists", "message": "Emergency system '{system_name}' already exists", "recovery": "Choose a different system name"}, {"condition": "invalid_emergency_types", "message": "Invalid emergency types specified", "recovery": "Use valid emergency type names"}, {"condition": "invalid_response_actions", "message": "Invalid emergency response actions", "recovery": "Configure valid emergency response actions"}, {"condition": "no_emergency_authority", "message": "No permission to create emergency systems", "recovery": "Emergency systems require highest permissions"}], "safety_class": "restricted", "idempotent": false, "reversible": true, "examples": [{"input": "create emergency systems Crisis Response types power_failure,hull_breach,fire actions emergency_power,seal_compartments,sound_alarm", "parsed": {"verb": "create_emergency_systems", "target": {"zone": "emergency"}, "parameters": {"system_name": "Crisis Response", "emergency_types": ["power_failure", "hull_breach", "fire"], "response_actions": ["emergency_power", "seal_compartments", "sound_alarm"]}}}, {"input": "emergency automation Ship Safety", "parsed": {"verb": "create_emergency_systems", "target": {"name": "emergency timer"}, "parameters": {"system_name": "Ship Safety", "emergency_types": ["collision", "combat"], "response_actions": ["damage_control", "defensive_measures"], "escalation_levels": ["warning", "critical", "abandon_ship"]}}}], "synonyms": ["emergency response", "crisis management", "emergency automation"], "tags": ["specialized", "emergency", "automation", "crisis"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Timer_Block__part-001.md", "sections": ["Emergency Systems"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}
{"id": "specialized.get_atmospheric_conditions.parachute.v1", "title": "Get atmospheric conditions", "category": "specialized", "verb": "get_atmospheric_conditions", "natural_language_triggers": ["get atmospheric conditions", "atmosphere status", "atmospheric pressure", "air density"], "targets": {"allowed_types": ["Parachute Hatch"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current", "connected"], "multi_target": true, "target_validation": "must_be_parachute"}, "parameters": [], "se_implementation": {"toolbar_actions": [], "terminal_path": ["Terminal", "Parachute Hatch", "Atmospheric Status"], "modapi_calls": [{"interface": "IMyParachute", "property": "Atmosphere", "method": "get_Atmosphere()"}], "group_compatible": true, "timer_compatible": false, "event_controller_compatible": false}, "preconditions": ["Parachute hatch must exist", "User must have view authority"], "effects": ["Returns atmospheric density", "Returns pressure information", "Returns parachute deployment viability", "No state change"], "constraints": {"power_required_mw": 0, "network_sync": false, "multiplayer_authority": "view_access", "execution_time_ms": 1, "instruction_cost": 3}, "validation_hooks": ["check_block_exists(target)", "check_block_type_parachute(target)", "check_view_authority(target)"], "error_cases": [{"condition": "parachute_not_found", "message": "No parachute hatches matching '{target}' found", "recovery": "List available parachute hatches"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "check atmospheric conditions", "parsed": {"verb": "get_atmospheric_conditions", "target": {"type": "parachute"}}}, {"input": "atmosphere status", "parsed": {"verb": "get_atmospheric_conditions", "target": {"name": "landing sensor"}}}], "synonyms": ["atmosphere status", "atmospheric pressure", "air density"], "tags": ["specialized", "monitoring", "atmosphere", "conditions"], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyParachute.md", "sections": ["Properties", "Atmosphere"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-XX"}}