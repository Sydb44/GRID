{"id": "ai_systems.emergency_ai_stop.coordination.v1", "title": "Emergency AI stop - all AI operations", "category": "ai_coordination", "verb": "emergency_ai_stop", "natural_language_triggers": ["emergency ai stop", "stop all ai", "ai emergency stop", "halt all ai", "emergency ai shutdown"], "targets": {"allowed_types": ["*"], "allowed_selectors": ["all"], "grid_scope": ["current"], "multi_target": false, "target_validation": "any_ai_blocks"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Emergency AI Stop"], "terminal_path": ["Terminal", "Emergency", "AI Stop"], "modapi_calls": [{"interface": "AIBlockCoordinator", "method": "ExecuteEmergencyAIStop()"}], "group_compatible": false, "timer_compatible": false, "event_controller_compatible": true}, "preconditions": ["Emergency situation detected or commanded", "User must have EMERGENCY AUTHORITY"], "effects": ["ALL AI operations stopped immediately", "Emergency AI stop flag activated", "All AI blocks disabled", "Manual control restored", "CRITICAL: Human override priority established"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "emergency_or_admin", "execution_time_ms": 100, "instruction_cost": 50}, "validation_hooks": ["check_emergency_authority()", "check_ai_blocks_exist()"], "error_cases": [{"condition": "no_ai_blocks", "message": "No AI blocks found to stop", "recovery": "Check if AI blocks are present on grid"}], "safety_class": "emergency_critical", "idempotent": true, "reversible": true, "examples": [{"input": "emergency ai stop all", "parsed": {"verb": "emergency_ai_stop", "target": {"selector": "all"}}}], "synonyms": ["stop all ai", "ai emergency stop", "halt all ai", "emergency ai shutdown"], "tags": ["ai_systems", "emergency", "stop", "safety", "critical"], "sources": [{"type": "Custom", "path": "GRID/Scripts/Controllers/AIBlockCoordinator.cs", "sections": ["Emergency Safety Systems"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.manual_override.coordination.v1", "title": "Activate manual override", "category": "ai_coordination", "verb": "manual_override", "natural_language_triggers": ["manual override", "human control", "take manual control", "override ai", "manual control"], "targets": {"allowed_types": ["*"], "allowed_selectors": ["all"], "grid_scope": ["current"], "multi_target": false, "target_validation": "any_ai_blocks"}, "parameters": [{"name": "activate", "type": "boolean", "required": true, "description": "Activate or deactivate manual override"}], "se_implementation": {"toolbar_actions": ["Manual Override"], "terminal_path": ["Terminal", "Safety", "Manual Override"], "modapi_calls": [{"interface": "AIBlockCoordinator", "method": "ExecuteManualOverride(activate)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["User must have control authority", "SAFETY: Human override must be respected"], "effects": ["Manual override status updated", "If activated: All AI operations stopped", "If deactivated: AI operations can be enabled", "Human control priority established"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 50, "instruction_cost": 15}, "validation_hooks": ["check_user_authority()"], "error_cases": [{"condition": "authority_insufficient", "message": "Insufficient authority for manual override", "recovery": "Check ownership or faction permissions"}], "safety_class": "safety_critical", "idempotent": true, "reversible": true, "examples": [{"input": "activate manual override", "parsed": {"verb": "manual_override", "target": {"selector": "all"}, "parameters": {"activate": true}}}, {"input": "deactivate manual override", "parsed": {"verb": "manual_override", "target": {"selector": "all"}, "parameters": {"activate": false}}}], "synonyms": ["human control", "take manual control", "override ai", "manual control"], "tags": ["ai_systems", "manual", "override", "safety", "human"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.reset_emergency_systems.coordination.v1", "title": "Reset AI emergency systems", "category": "ai_coordination", "verb": "reset_emergency_systems", "natural_language_triggers": ["reset emergency systems", "clear emergency state", "reset ai emergency", "emergency reset"], "targets": {"allowed_types": ["*"], "allowed_selectors": ["all"], "grid_scope": ["current"], "multi_target": false, "target_validation": "any_ai_blocks"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Reset Emergency"], "terminal_path": ["Terminal", "Safety", "Reset Emergency"], "modapi_calls": [{"interface": "AIBlockCoordinator", "method": "ResetEmergencySystems()"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Emergency systems must be in emergency state", "User must have reset authority"], "effects": ["Emergency AI stop cleared", "Manual override cleared", "AI operations can be enabled again", "Emergency state reset"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 25, "instruction_cost": 10}, "validation_hooks": ["check_reset_authority()", "check_emergency_state_active()"], "error_cases": [{"condition": "no_emergency_state", "message": "No emergency state to reset", "recovery": "Emergency systems are already in normal state"}], "safety_class": "safety_critical", "idempotent": true, "reversible": false, "examples": [{"input": "reset emergency systems", "parsed": {"verb": "reset_emergency_systems", "target": {"selector": "all"}}}], "synonyms": ["clear emergency state", "reset ai emergency", "emergency reset"], "tags": ["ai_systems", "reset", "emergency", "safety"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.create_coordination_group.coordination.v1", "title": "Create AI coordination group", "category": "ai_coordination", "verb": "create_coordination_group", "natural_language_triggers": ["create ai group", "coordinate ai blocks", "group ai behavior", "ai coordination", "setup ai group"], "targets": {"allowed_types": ["AI Basic", "AI Flight", "AI Defensive", "AI Offensive"], "allowed_selectors": ["by_name", "by_group", "by_type", "by_zone"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_blocks"}, "parameters": [{"name": "group_name", "type": "string", "required": true, "validation": "group_name", "description": "Name for the AI coordination group"}, {"name": "coordination_mode", "type": "string", "range": ["synchronized", "sequential", "parallel"], "default": "synchronized", "required": false, "validation": "coordination_mode"}], "se_implementation": {"toolbar_actions": ["Create Group"], "terminal_path": ["Terminal", "AI Coordination", "Create Group"], "modapi_calls": [{"interface": "AIBlockCoordinator", "method": "CreateAICoordinationGroup(group_name, ai_block_ids, group_params)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["Multiple AI blocks must exist", "AI blocks must be compatible for coordination", "Group name must be unique", "User must have control authority"], "effects": ["AI coordination group created", "Multi-AI coordination enabled", "Behavior synchronization prepared", "Group-level control available"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 75, "instruction_cost": 20}, "validation_hooks": ["check_ai_blocks_compatible(targets)", "validate_group_name_unique(group_name)", "check_coordination_feasible(coordination_mode)"], "error_cases": [{"condition": "group_name_exists", "message": "Coordination group '{group_name}' already exists", "recovery": "Use different group name or delete existing group"}, {"condition": "incompatible_ai_blocks", "message": "Selected AI blocks are not compatible for coordination", "recovery": "Select compatible AI block types"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "create ai group defense fleet synchronized", "parsed": {"verb": "create_coordination_group", "target": {"type": "ai_combat"}, "parameters": {"group_name": "defense_fleet", "coordination_mode": "synchronized"}}}], "synonyms": ["coordinate ai blocks", "group ai behavior", "ai coordination", "setup ai group"], "tags": ["ai_systems", "coordination", "group", "multi_ai"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
