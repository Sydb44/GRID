{"id": "ai_systems.enable_ai_flight.flight.v1", "title": "Enable AI Flight autonomous movement", "category": "ai_flight", "verb": "enable_ai_flight", "natural_language_triggers": ["enable ai flight", "activate ai flight", "start ai flight", "ai flight on", "configure ai flight"], "targets": {"allowed_types": ["AI Flight", "Flight Movement Block"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current"], "multi_target": false, "target_validation": "must_be_ai_flight"}, "parameters": [{"name": "speed_limit", "type": "float", "range": {"min": 1.0, "max": 100.0}, "units": "m/s", "default": 50.0, "required": false, "validation": "speed_range"}, {"name": "precision_mode", "type": "boolean", "default": false, "required": false, "description": "Enable precision mode for exact waypoints"}, {"name": "collision_avoidance", "type": "boolean", "default": true, "required": false, "description": "Enable collision avoidance"}], "se_implementation": {"toolbar_actions": ["AI Behavior"], "terminal_path": ["Terminal", "AI Flight", "AI Behavior"], "modapi_calls": [{"interface": "IMyFlightMovementBlock", "property": "AI Behavior", "method": "SetProperty(\"AI Behavior\", true)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Flight block must exist", "AI Flight block must be functional", "AI Flight block must be powered", "Task or Combat AI must be present", "Grid must have 6-direction thrusters", "Grid must have gyroscopes", "User must have control authority"], "effects": ["AI Flight behavior enabled", "Autonomous movement execution begins", "Takes control of thrusters and gyroscopes", "Executes waypoints from Task/Combat AI"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 50, "instruction_cost": 15}, "validation_hooks": ["check_block_exists(target)", "check_block_type_ai_flight(target)", "check_block_functional(target)", "check_block_powered(target)", "check_thrusters_available()", "check_gyroscopes_available()", "check_task_or_combat_ai()", "check_user_authority(target)"], "error_cases": [{"condition": "ai_flight_not_found", "message": "No AI Flight blocks matching '{target}' found", "recovery": "List available AI Flight blocks"}, {"condition": "missing_thrusters", "message": "AI Flight requires 6-direction thrusters", "recovery": "Add thrusters in all directions"}, {"condition": "no_task_ai", "message": "AI Flight requires Task AI (AI Basic/Recorder) or Combat AI", "recovery": "Add AI Basic, AI Recorder, or Combat AI block"}], "safety_class": "critical", "idempotent": true, "reversible": true, "examples": [{"input": "enable ai flight precision mode", "parsed": {"verb": "enable_ai_flight", "target": {"type": "ai_flight"}, "parameters": {"precision_mode": true, "speed_limit": 25.0}}}], "synonyms": ["activate ai flight", "start ai flight", "ai flight on", "configure ai flight"], "tags": ["ai_systems", "ai_flight", "movement", "autonomous"], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Flight/AI_Flight__part-001.md", "sections": ["Usage", "Requirements"]}], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.set_flight_speed.flight.v1", "title": "Set AI Flight speed limit", "category": "ai_flight", "verb": "set_flight_speed", "natural_language_triggers": ["set flight speed", "flight speed", "ai speed limit", "change flight speed"], "targets": {"allowed_types": ["AI Flight", "Flight Movement Block"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_flight"}, "parameters": [{"name": "speed_limit", "type": "float", "range": {"min": 1.0, "max": 100.0}, "units": "m/s", "required": true, "validation": "speed_range"}, {"name": "precision_mode", "type": "boolean", "required": false, "description": "Enable precision mode for exact stops"}], "se_implementation": {"toolbar_actions": ["Speed Limit"], "terminal_path": ["Terminal", "AI Flight", "Speed Limit"], "modapi_calls": [{"interface": "IMyFlightMovementBlock", "property": "Speed Limit", "method": "SetProperty(\"Speed Limit\", speed_limit)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Flight block must exist", "AI Flight block must be enabled", "Speed must be within valid range"], "effects": ["AI Flight speed limit updated", "Flight behavior adjusts to new speed", "Precision mode affects waypoint handling"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 10, "instruction_cost": 5}, "validation_hooks": ["check_ai_flight_enabled(target)", "validate_speed_range(speed_limit)"], "error_cases": [{"condition": "speed_out_of_range", "message": "Speed limit must be between 1-100 m/s", "recovery": "Use valid speed range"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "set flight speed to 25 meters per second", "parsed": {"verb": "set_flight_speed", "target": {"type": "ai_flight"}, "parameters": {"speed_limit": 25.0}}}], "synonyms": ["flight speed", "ai speed limit", "change flight speed"], "tags": ["ai_systems", "flight", "speed", "control"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.collision_avoidance.flight.v1", "title": "Configure AI Flight collision avoidance", "category": "ai_flight", "verb": "collision_avoidance", "natural_language_triggers": ["collision avoidance", "obstacle avoidance", "enable collision avoidance", "disable collision avoidance"], "targets": {"allowed_types": ["AI Flight", "Flight Movement Block"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_flight"}, "parameters": [{"name": "enable", "type": "boolean", "required": true, "description": "Enable or disable collision avoidance"}], "se_implementation": {"toolbar_actions": ["Collision Avoidance"], "terminal_path": ["Terminal", "AI Flight", "Collision Avoidance"], "modapi_calls": [{"interface": "IMyFlightMovementBlock", "property": "Collision Avoidance", "method": "SetProperty(\"Collision Avoidance\", enable)"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Flight block must exist", "AI Flight block must be enabled"], "effects": ["Collision avoidance setting updated", "AI flight behavior adjusts accordingly", "May affect navigation precision"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 10, "instruction_cost": 3}, "validation_hooks": ["check_ai_flight_enabled(target)"], "error_cases": [{"condition": "ai_flight_not_enabled", "message": "AI Flight must be enabled first", "recovery": "Enable AI Flight before configuring collision avoidance"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "enable collision avoidance", "parsed": {"verb": "collision_avoidance", "target": {"type": "ai_flight"}, "parameters": {"enable": true}}}, {"input": "disable obstacle avoidance for docking", "parsed": {"verb": "collision_avoidance", "target": {"name": "docking ai"}, "parameters": {"enable": false}}}], "synonyms": ["obstacle avoidance", "enable collision avoidance", "disable collision avoidance"], "tags": ["ai_systems", "flight", "safety", "collision"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.emergency_landing.flight.v1", "title": "Execute AI Flight emergency landing", "category": "ai_flight", "verb": "emergency_landing", "natural_language_triggers": ["emergency landing", "emergency land", "ai emergency landing", "force landing", "immediate landing"], "targets": {"allowed_types": ["AI Flight", "Flight Movement Block"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_flight"}, "parameters": [{"name": "landing_position", "type": "vector3d", "required": false, "description": "Specific landing coordinates (optional)"}], "se_implementation": {"toolbar_actions": ["Emergency Landing"], "terminal_path": ["Terminal", "AI Flight", "Emergency Operations"], "modapi_calls": [{"interface": "IMyFlightMovementBlock", "method": "ExecuteEmergencyProcedure()"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Flight block must exist", "AI Flight block must be enabled", "Emergency situation detected or commanded"], "effects": ["Emergency landing sequence initiated", "Speed reduced to safe levels", "Precision mode automatically enabled", "Collision avoidance automatically enabled"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 100, "instruction_cost": 20}, "validation_hooks": ["check_ai_flight_enabled(target)", "validate_landing_position(landing_position)"], "error_cases": [{"condition": "no_suitable_landing", "message": "No suitable landing area found", "recovery": "Specify landing coordinates or find open area"}], "safety_class": "emergency", "idempotent": false, "reversible": false, "examples": [{"input": "emergency landing now", "parsed": {"verb": "emergency_landing", "target": {"type": "ai_flight"}}}], "synonyms": ["emergency land", "ai emergency landing", "force landing", "immediate landing"], "tags": ["ai_systems", "emergency", "landing", "safety"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.start_recording.recorder.v1", "title": "Start AI Recorder path recording", "category": "ai_flight", "verb": "start_recording", "natural_language_triggers": ["start recording", "record path", "begin recording", "ai record", "record flight path"], "targets": {"allowed_types": ["AI Recorder", "Recorder Block"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_recorder"}, "parameters": [{"name": "record_interval", "type": "float", "range": {"min": 1.7, "max": 30.0}, "units": "seconds", "default": 5.0, "required": false, "validation": "interval_range"}, {"name": "minimal_distance", "type": "float", "range": {"min": 1.0, "max": 300.0}, "units": "meters", "default": 10.0, "required": false, "validation": "distance_range"}], "se_implementation": {"toolbar_actions": ["Record"], "terminal_path": ["Terminal", "AI Recorder", "Record"], "modapi_calls": [{"interface": "IMyRecorderBlock", "method": "ApplyAction(\"Record\")"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Recorder block must exist", "AI Recorder block must be functional", "AI Flight block must be present", "User must have control authority"], "effects": ["Path recording starts", "Waypoints recorded at intervals", "Actions recorded during flight", "Path stored for playback"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 20, "instruction_cost": 10}, "validation_hooks": ["check_block_exists(target)", "check_ai_recorder_functional(target)", "validate_recording_parameters(record_interval, minimal_distance)"], "error_cases": [{"condition": "already_recording", "message": "AI Recorder is already recording", "recovery": "Stop current recording first"}], "safety_class": "safe", "idempotent": false, "reversible": true, "examples": [{"input": "start recording flight path every 3 seconds", "parsed": {"verb": "start_recording", "target": {"type": "ai_recorder"}, "parameters": {"record_interval": 3.0, "minimal_distance": 10.0}}}], "synonyms": ["record path", "begin recording", "ai record", "record flight path"], "tags": ["ai_systems", "recorder", "path", "recording"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.play_recorded_path.recorder.v1", "title": "Play AI Recorder recorded path", "category": "ai_flight", "verb": "play_recorded_path", "natural_language_triggers": ["play recorded path", "playback path", "follow recorded path", "execute recorded path", "ai playback"], "targets": {"allowed_types": ["AI Recorder", "Recorder Block"], "allowed_selectors": ["by_name", "by_group", "by_type"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_recorder"}, "parameters": [{"name": "repeat", "type": "boolean", "default": false, "required": false, "description": "Enable path repeat/loop"}], "se_implementation": {"toolbar_actions": ["Play"], "terminal_path": ["Terminal", "AI Recorder", "Play"], "modapi_calls": [{"interface": "IMyRecorderBlock", "method": "ApplyAction(\"Play\")"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Recorder block must exist", "AI Recorder must have recorded path", "AI Flight block must be enabled", "Path must be valid"], "effects": ["Recorded path playback starts", "AI follows recorded waypoints", "Actions replay at waypoints", "Movement coordinates with AI Flight"], "constraints": {"power_required_mw": 0.01, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 30, "instruction_cost": 12}, "validation_hooks": ["check_ai_recorder_has_path(target)", "check_ai_flight_enabled()"], "error_cases": [{"condition": "no_recorded_path", "message": "No recorded path available", "recovery": "Record a path first before playback"}, {"condition": "ai_flight_disabled", "message": "AI Flight must be enabled for path playback", "recovery": "Enable AI Flight block first"}], "safety_class": "safe", "idempotent": true, "reversible": true, "examples": [{"input": "play recorded path on repeat", "parsed": {"verb": "play_recorded_path", "target": {"type": "ai_recorder"}, "parameters": {"repeat": true}}}], "synonyms": ["playback path", "follow recorded path", "execute recorded path", "ai playback"], "tags": ["ai_systems", "recorder", "playback", "path"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
{"id": "ai_systems.stop_recording.recorder.v1", "title": "Stop AI Recorder recording or playback", "category": "ai_flight", "verb": "stop_recording", "natural_language_triggers": ["stop recording", "stop playback", "halt recording", "stop ai recorder", "end recording"], "targets": {"allowed_types": ["AI Recorder", "Recorder Block", "AI Flight", "Flight Movement Block"], "allowed_selectors": ["by_name", "by_group", "by_type", "all"], "grid_scope": ["current"], "multi_target": true, "target_validation": "must_be_ai_recorder_or_flight"}, "parameters": [], "se_implementation": {"toolbar_actions": ["Stop"], "terminal_path": ["Terminal", "AI Recorder", "Stop"], "modapi_calls": [{"interface": "IMyRecorderBlock", "method": "ApplyAction(\"Stop\")"}], "group_compatible": false, "timer_compatible": true, "event_controller_compatible": true}, "preconditions": ["AI Recorder or AI Flight block must exist", "Recording or playback must be active"], "effects": ["Recording stops if active", "Playback stops if active", "Path preserved for future use"], "constraints": {"power_required_mw": 0, "network_sync": true, "multiplayer_authority": "owner_or_admin", "execution_time_ms": 10, "instruction_cost": 5}, "validation_hooks": ["check_block_exists(target)"], "error_cases": [{"condition": "nothing_to_stop", "message": "No active recording or playback to stop", "recovery": "Check if recording or playback is active"}], "safety_class": "safe", "idempotent": true, "reversible": false, "examples": [{"input": "stop all recording", "parsed": {"verb": "stop_recording", "target": {"type": "ai_recorder", "selector": "all"}}}], "synonyms": ["stop playback", "halt recording", "stop ai recorder", "end recording"], "tags": ["ai_systems", "stop", "recording", "playback"], "version": {"schema": "1.0", "command_version": "1.0.0", "last_validated": "2024-01-20"}}
