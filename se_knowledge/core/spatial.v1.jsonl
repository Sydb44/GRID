{"id": "core.coordinate_systems.world_coordinates.v1", "category": "spatial", "priority": "core", "token_count": 1096, "blocks": [], "interfaces": ["Vector3D", "Vector3"], "terminal_actions": [], "properties": [{"name": "X", "type": "double", "range": "-∞ to +∞", "units": "meters", "terminal_name": "X Coordinate"}, {"name": "Y", "type": "double", "range": "-∞ to +∞", "units": "meters", "terminal_name": "Y Coordinate"}, {"name": "Z", "type": "double", "range": "-∞ to +∞", "units": "meters", "terminal_name": "Z Coordinate"}], "commands": [{"syntax": "new Vector3D(x, y, z)", "parameters": ["x_coordinate", "y_coordinate", "z_coordinate"], "example": "Vector3D position = new Vector3D(1000.0, 0.0, 5000.0)"}, {"syntax": "/gps", "parameters": [], "example": "/gps creates GPS waypoint at current position"}, {"syntax": "/gps MyBase", "parameters": ["waypoint_name"], "example": "/gps MyBase creates named GPS waypoint"}], "automation_patterns": [{"pattern": "Position Calculation", "blocks_required": ["Programmable Block"], "setup": ["Get grid world position using MyAPIGateway.Session.Player.Character.WorldMatrix.Translation", "Use Vector3D for world coordinates", "Calculate distances with Vector3D.Distance()"], "toolbar_actions": ["N/A - scripting only"]}, {"pattern": "GPS Management", "blocks_required": ["Terminal"], "setup": ["Access GPS tab in terminal", "Use New From Current Position for current location", "Set waypoint name, description, color", "Toggle Show on HUD visibility"], "toolbar_actions": ["New From Current Position", "New", "Delete"]}], "constraints": {"grid_types": ["all"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0, "pcu_cost": 0, "dependencies": [], "limits": {"max_range_m": "infinite", "max_speed_ms": 0, "instruction_cost": 0}}, "validation_rules": ["World coordinates use right-handed coordinate system", "X-axis: negative=west, positive=east", "Y-axis: negative=north, positive=south", "Z-axis: negative=backward, positive=forward", "Coordinates measured in meters from world origin", "GPS waypoints use world coordinate system"], "common_failures": [{"error": "GPS waypoint wrong location", "cause": "Confusion about coordinate system orientation", "solution": "Remember Y-axis is north(-) to south(+), not up/down"}, {"error": "Distance calculation incorrect", "cause": "Using wrong coordinate system", "solution": "Ensure using world coordinates for distance calculations"}], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/GPS__part-001.md", "sections": ["Coordinate System", "Numbers Meaning"]}, {"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/Vector3D__part-001.md", "sections": ["Vector3D Properties"]}], "tags": ["coordinates", "world", "gps", "x", "y", "z", "position", "meters", "waypoint"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}
{"id": "core.grid_positioning.pivot_center_mass.v1", "category": "spatial", "priority": "core", "token_count": 1034, "blocks": [], "interfaces": ["IMyCubeGrid"], "terminal_actions": [], "properties": [{"name": "WorldMatrix", "type": "MatrixD", "range": "transformation_matrix", "units": "none", "terminal_name": "World Matrix"}, {"name": "LocalMatrix", "type": "MatrixD", "range": "transformation_matrix", "units": "none", "terminal_name": "Local Matrix"}, {"name": "Physics.CenterOfMassWorld", "type": "Vector3D", "range": "world_position", "units": "meters", "terminal_name": "Center of Mass"}], "commands": [{"syntax": "Show Grid Pivot", "parameters": [], "example": "Enable in Info Screen settings to visualize pivot point"}, {"syntax": "Show Center of Mass", "parameters": [], "example": "Enable in Info Screen to visualize center of mass"}, {"syntax": "grid.Physics.CenterOfMassWorld", "parameters": [], "example": "Get world position of center of mass"}], "automation_patterns": [{"pattern": "Grid Pivot Management", "blocks_required": ["Any starting block"], "setup": ["First block placed becomes grid pivot", "Pivot stays fixed when adding blocks", "Use Copy&Paste to move pivot point", "Build helper grid at desired pivot location"], "toolbar_actions": ["Copy&Paste operations"]}, {"pattern": "Center of Mass Monitoring", "blocks_required": ["Programmable Block"], "setup": ["Access grid.Physics.CenterOfMassWorld", "Monitor changes when cargo/fuel changes", "Calculate balance for gyroscope placement", "Check stability for planetary vehicles"], "toolbar_actions": ["N/A - monitoring only"]}], "constraints": {"grid_types": ["small", "large", "station"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0, "pcu_cost": 0, "dependencies": ["blocks_on_grid"], "limits": {"max_range_m": 0, "max_speed_ms": 0, "instruction_cost": 0}}, "validation_rules": ["Grid pivot = center of first block placed", "Center of mass = physics-calculated mass center", "Pivot point never changes after creation", "Center of mass updates with block/cargo changes", "Thrust and rotation applied to center of mass", "Pivot used for projector positioning and copy/paste"], "common_failures": [{"error": "Projection appears in wrong position", "cause": "Grid pivot not where expected", "solution": "Check pivot visualization and recreate grid with centered first block"}, {"error": "Ship tilts or tips over", "cause": "Center of mass too high or off-center", "solution": "Redistribute mass or place gyroscopes near center of mass"}, {"error": "Inefficient gyroscope placement", "cause": "Gyroscopes far from center of mass", "solution": "Place gyroscopes as close to center of mass as possible"}], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Grid_Pivot.md", "sections": ["Grid Pivot Location", "Moving Pivot"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Center_of_Mass.md", "sections": ["Center of Mass Location", "Physics Application"]}], "tags": ["grid", "pivot", "center_mass", "physics", "positioning", "first_block", "balance"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}
{"id": "core.directional_systems.base6_base27.v1", "category": "spatial", "priority": "core", "token_count": 967, "blocks": [], "interfaces": ["Base6Directions", "Base27Directions"], "terminal_actions": [], "properties": [], "commands": [{"syntax": "Base6Directions.Direction.Forward", "parameters": [], "example": "Use predefined direction constants"}, {"syntax": "Base6Directions.GetVector(direction)", "parameters": ["direction_enum"], "example": "Get Vector3I from direction enum"}, {"syntax": "Base27Directions.GetDirection(vector)", "parameters": ["normalized_vector"], "example": "Convert normalized vector to direction"}], "automation_patterns": [{"pattern": "Block Orientation", "blocks_required": ["Any oriented block"], "setup": ["Blocks have Orientation property using MyBlockOrientation", "Forward, Up vectors define block facing", "Use Base6Directions for cardinal directions", "Relative to block's local coordinate system"], "toolbar_actions": ["N/A - orientation system"]}, {"pattern": "Direction Calculation", "blocks_required": ["Programmable Block"], "setup": ["Use Base6Directions for 6 cardinal directions", "Use Base27Directions for 27 directions (including diagonals)", "Convert between vectors and direction enums", "Handle block-relative vs world-relative directions"], "toolbar_actions": ["N/A - calculation system"]}], "constraints": {"grid_types": ["small", "large", "station"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0, "pcu_cost": 0, "dependencies": [], "limits": {"max_range_m": 0, "max_speed_ms": 0, "instruction_cost": 0}}, "validation_rules": ["Base6Directions: Forward, Backward, Left, Right, Up, Down", "Base27Directions: 26 directions + Vector3.Zero", "Each component in Base27 is only -1, 0, or 1", "Direction enums are block-relative, not world-relative", "Block orientation determines local coordinate system"], "common_failures": [{"error": "Wrong direction calculation", "cause": "Confusing block-relative vs world-relative directions", "solution": "Transform block-relative directions to world space using block matrix"}, {"error": "Thruster not firing in expected direction", "cause": "Block orientation not matching expected direction", "solution": "Check block's Orientation property and local coordinate system"}], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/Direction.md", "sections": ["Base6Directions Constants"]}, {"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/Base27Directions__part-001.md", "sections": ["Direction System", "GetDirection Method"]}], "tags": ["directions", "base6", "base27", "orientation", "forward", "backward", "left", "right", "up", "down"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}
{"id": "core.gps_waypoint_system.navigation.v1", "category": "spatial", "priority": "core", "token_count": 1124, "blocks": ["Broadcast Controller"], "interfaces": [], "terminal_actions": ["New From Current Position", "New", "Delete", "Copy to Clipboard", "New From Clipboard"], "properties": [{"name": "Name", "type": "string", "range": "text_no_colons", "units": "none", "terminal_name": "Name"}, {"name": "Description", "type": "string", "range": "any_text", "units": "none", "terminal_name": "Description"}, {"name": "X", "type": "double", "range": "world_coordinate", "units": "meters", "terminal_name": "X"}, {"name": "Y", "type": "double", "range": "world_coordinate", "units": "meters", "terminal_name": "Y"}, {"name": "Z", "type": "double", "range": "world_coordinate", "units": "meters", "terminal_name": "Z"}, {"name": "Color", "type": "color", "range": "rgb_hsv_hex", "units": "none", "terminal_name": "Color"}, {"name": "Show on HUD", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Show on HUD"}, {"name": "Always Visible", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Always Visible"}], "commands": [{"syntax": "/gps", "parameters": [], "example": "Create GPS waypoint at current position"}, {"syntax": "/gps MyBase", "parameters": ["name"], "example": "Create named GPS waypoint at current position"}, {"syntax": "/gps faction", "parameters": [], "example": "Share GPS waypoint with faction members"}, {"syntax": "/gps share", "parameters": [], "example": "Share GPS waypoint globally"}, {"syntax": "GPS:Name:X:Y:Z:", "parameters": ["name", "x", "y", "z"], "example": "GPS:Base Alpha:1000:500:2000: - standard GPS format"}], "automation_patterns": [{"pattern": "GPS Creation", "blocks_required": ["Character or Remote Control"], "setup": ["Use /gps commands for quick creation", "Terminal GPS tab for detailed management", "Set meaningful names and descriptions", "Use color coding for different types"], "toolbar_actions": ["New From Current Position", "New"]}, {"pattern": "GPS Sharing", "blocks_required": ["Broadcast Controller"], "setup": ["Broadcast Controller can send GPS position", "Use /gps faction or /gps share for manual sharing", "Copy GPS text format for sharing", "Recipients must manually save shared coordinates"], "toolbar_actions": ["Copy to Clipboard", "New From Clipboard"]}, {"pattern": "Navigation Setup", "blocks_required": ["GPS Waypoints"], "setup": ["Create waypoint chains for navigation routes", "Use color gradients for directional flow", "Set Show on HUD for active navigation", "Use Always Visible for critical waypoints"], "toolbar_actions": ["Show on HUD toggle", "Always Visible toggle"]}], "constraints": {"grid_types": ["all"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0, "pcu_cost": 0, "dependencies": ["terminal_access"], "limits": {"max_range_m": "infinite", "max_speed_ms": 0, "instruction_cost": 0}}, "validation_rules": ["GPS format: GPS:Name:X:Y:Z: (optional color after last colon)", "Name cannot contain colon characters", "Description not included in copy/paste format", "Waypoints show distance and direction on HUD", "Double-click waypoint list to toggle HUD visibility", "Waypoints are per-player, not per-grid"], "common_failures": [{"error": "Cannot create GPS waypoint", "cause": "Using colon in waypoint name", "solution": "Remove colons from waypoint names"}, {"error": "Shared GPS not appearing", "cause": "Recipients didn't manually save the coordinates", "solution": "Recipients must double-click shared coordinates to save permanently"}, {"error": "GPS waypoint in wrong location", "cause": "Created while in spectator mode", "solution": "GPS records player character location, not spectator camera"}], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/GPS__part-001.md", "sections": ["Creation", "Waypoint Management"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/GPS__part-002.md", "sections": ["Sharing", "Commands", "Format"]}], "tags": ["gps", "waypoint", "navigation", "coordinates", "hud", "sharing", "terminal", "commands"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}
{"id": "core.grid_connections.mixed_grid_systems.v1", "category": "spatial", "priority": "core", "token_count": 1098, "blocks": ["Rotor", "Advanced Rotor", "Hinge", "Piston", "Connector", "Merge Block", "Landing Gear"], "interfaces": ["IMyMotorStator", "IMyMechanicalConnectionBlock"], "terminal_actions": ["Attach", "Detach", "Add Small Head", "Lock", "Unlock"], "properties": [{"name": "IsAttached", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Attached"}, {"name": "IsSameConstructAs", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Same Construct"}], "commands": [{"syntax": "Add Small Head", "parameters": [], "example": "Add small grid head to large grid rotor/hinge stator"}, {"syntax": "Attach", "parameters": [], "example": "Connect separate head to stator when in range"}, {"syntax": "Detach", "parameters": [], "example": "Disconnect head from stator"}, {"syntax": "IsSameConstructAs(otherBlock)", "parameters": ["target_block"], "example": "Check if blocks are mechanically connected"}], "automation_patterns": [{"pattern": "Mixed Grid Construction", "blocks_required": ["Large Grid Rotor/Hinge", "Small Grid Blocks"], "setup": ["Build large grid rotor/hinge", "Detach and grind auto-generated head", "Click Add Small Head", "Build small grid from new head"], "toolbar_actions": ["Detach", "Add Small Head"]}, {"pattern": "Grid Docking", "blocks_required": ["Rotor/Hinge with heads", "Two separate grids"], "setup": ["Build rotor head on mobile grid", "Align with headless stator", "Use Attach button or Timer automation", "Lock mechanical connection"], "toolbar_actions": ["Attach", "Detach", "Lock"]}, {"pattern": "Construct Detection", "blocks_required": ["Programmable Block", "Mechanical connections"], "setup": ["Use IsSameConstructAs() to check connections", "Detect mechanical links vs simple docking", "Account for rotor/piston/hinge connections", "Merge blocks combine grids permanently"], "toolbar_actions": ["N/A - detection only"]}], "constraints": {"grid_types": ["mixed_large_small"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0002, "pcu_cost": 25, "dependencies": ["mechanical_blocks"], "limits": {"max_range_m": 1.0, "max_speed_ms": 0, "instruction_cost": 0}}, "validation_rules": ["Small grid heads fit on large grid stators", "Mixed grids create permanent mechanical connections", "Subgrids inherit some main grid properties", "Power flows through mechanical connections", "Conveyor systems work through mechanical connections", "Subgrids cannot be controlled with WASD from main cockpit"], "common_failures": [{"error": "Cannot attach head to stator", "cause": "Misalignment or too far apart", "solution": "Ensure precise alignment and close proximity (< 1m)"}, {"error": "Clang destruction on attachment", "cause": "Blocks too close causing collision", "solution": "Maintain safe clearance between grid parts"}, {"error": "Subgrid blocks not responding", "cause": "Mechanical connection broken", "solution": "Check connection status and reattach if needed"}], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/How_to_connect_small_and_large_grid_blocks.md", "sections": ["Mixed Grid Construction", "Attachment Methods"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Grid__part-001.md", "sections": ["Subgrid Connections"]}], "tags": ["mixed_grid", "rotor", "hinge", "piston", "attachment", "subgrid", "mechanical", "connection"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}
{"id": "core.distance_measurements.spatial_calculations.v1", "category": "spatial", "priority": "core", "token_count": 894, "blocks": [], "interfaces": ["Vector3D", "Vector3"], "terminal_actions": [], "properties": [], "commands": [{"syntax": "Vector3D.Distance(pos1, pos2)", "parameters": ["position1", "position2"], "example": "double distance = Vector3D.Distance(block1.WorldPosition, block2.WorldPosition)"}, {"syntax": "Vector3D.DistanceSquared(pos1, pos2)", "parameters": ["position1", "position2"], "example": "double distSq = Vector3D.DistanceSquared(pos1, pos2) // Faster than Distance"}, {"syntax": "(pos2 - pos1).Length()", "parameters": ["position1", "position2"], "example": "double distance = (targetPos - myPos).Length()"}], "automation_patterns": [{"pattern": "Distance Monitoring", "blocks_required": ["Programmable Block", "Reference blocks"], "setup": ["Get world positions of target blocks", "Calculate distances using Vector3D.Distance", "Monitor changes for proximity detection", "Use DistanceSquared for performance when comparing"], "toolbar_actions": ["N/A - calculation only"]}, {"pattern": "Range Detection", "blocks_required": ["Event Controller", "Distance measurement"], "setup": ["Event Controller can monitor Distance to Locked target", "Range: 1-2500 meters for locked targets", "Use for weapon range, formation flying", "Combine with other spatial triggers"], "toolbar_actions": ["Distance to Locked target event"]}], "constraints": {"grid_types": ["all"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0, "pcu_cost": 0, "dependencies": [], "limits": {"max_range_m": "infinite", "max_speed_ms": 0, "instruction_cost": 1}}, "validation_rules": ["All distances measured in meters", "Use world coordinates for accurate measurements", "DistanceSquared faster for comparisons (no sqrt)", "Vector subtraction gives direction and distance", "Consider grid size when measuring to blocks"], "common_failures": [{"error": "Incorrect distance calculation", "cause": "Using local instead of world coordinates", "solution": "Ensure using WorldPosition or WorldMatrix.Translation"}, {"error": "Performance issues with distance checks", "cause": "Using Distance() instead of DistanceSquared for comparisons", "solution": "Use DistanceSquared when only comparing distances"}], "sources": [{"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/Vector3D__part-001.md", "sections": ["Distance Methods"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Event_Controller__part-001.md", "sections": ["Distance Events"]}], "tags": ["distance", "measurement", "vector3d", "calculations", "meters", "range", "proximity"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}