{"id": "automation.programmable_blocks.scripting_automation.v1", "category": "automation", "priority": "system", "token_count": 1187, "blocks": ["Programmable Block"], "interfaces": ["IMyProgrammableBlock", "IMyGridProgram", "IMyGridTerminalSystem"], "terminal_actions": ["Run", "Stop", "Edit", "Check Code", "Recompile"], "properties": [{"name": "IsRunning", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Running"}, {"name": "TerminalRunArgument", "type": "string", "range": "any_text", "units": "none", "terminal_name": "Argument"}, {"name": "CustomData", "type": "string", "range": "any_text", "units": "none", "terminal_name": "Custom Data"}], "commands": [{"syntax": "Run", "parameters": ["optional_argument"], "example": "Execute script with optional argument parameter"}, {"syntax": "Stop", "parameters": [], "example": "Stop currently running script"}, {"syntax": "TryRun(string argument)", "parameters": ["argument"], "example": "Programmatically run script from another script"}, {"syntax": "Edit", "parameters": [], "example": "Open script editor for code modification"}, {"syntax": "Check Code", "parameters": [], "example": "Compile and validate script syntax"}, {"syntax": "Recompile", "parameters": [], "example": "Recompile after changes to custom data or grid"}], "automation_patterns": [{"pattern": "Script Triggers", "blocks_required": ["Programmable Block", "Timer/Sensor/Button"], "setup": ["Assign PB Run action to trigger blocks", "Use Timer Blocks to trigger scripts on schedule", "Use Sensors for proximity-based script execution", "Use Button Panels for manual script activation"], "toolbar_actions": ["Run", "Stop"]}, {"pattern": "Multi-Script Coordination", "blocks_required": ["Multiple Programmable Blocks"], "setup": ["Use TryRun() to call other scripts", "Coordinate complex automation across multiple PBs", "Pass arguments between scripts", "Implement script state management"], "toolbar_actions": ["Run with arguments"]}, {"pattern": "Custom Data Configuration", "blocks_required": ["Programmable Block"], "setup": ["Store script configuration in Custom Data", "Modify configuration without editing code", "Use for script parameters and settings", "Recompile after Custom Data changes"], "toolbar_actions": ["Custom Data", "Recompile"]}], "constraints": {"grid_types": ["small", "large", "station"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.0005, "pcu_cost": 100, "dependencies": ["power_supply", "experimental_mode", "ingame_scripts_enabled"], "limits": {"max_range_m": 0, "max_speed_ms": 0, "instruction_cost": 5}}, "validation_rules": ["Requires Experimental Mode enabled in Options", "Requires In-Game Scripts enabled in World Settings", "PC only - not available on consoles", "Must have power to execute scripts", "C# scripting language", "API access to all grid blocks and systems", "Can read/write any block property", "More powerful than Timers/Sensors/Event Controllers"], "common_failures": [{"error": "Script not running", "cause": "Experimental mode or in-game scripts disabled", "solution": "Enable both in Options and World Settings"}, {"error": "Compilation failed", "cause": "Syntax errors in script code", "solution": "Check code for errors, fix syntax issues"}, {"error": "Script stops unexpectedly", "cause": "Runtime error or power loss", "solution": "Check error messages and ensure stable power supply"}, {"error": "Cannot access blocks", "cause": "Block names changed or blocks removed", "solution": "Recompile script after grid changes"}], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Programmable_Block__part-001.md", "sections": ["Usage", "Requirements", "Capabilities"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/General/Programmable_Block__part-002.md", "sections": ["Triggers", "Troubleshooting"]}, {"type": "ModAPI", "path": "docs_chunked(ModAPI)/Misc/IMyProgrammableBlock.md", "sections": ["Properties", "Methods"]}], "tags": ["programmable_block", "scripting", "csharp", "automation", "api", "run", "argument", "custom_data"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}
{"id": "automation.sensors.proximity_detection.v1", "category": "automation", "priority": "system", "token_count": 1194, "blocks": ["Sensor", "Automaton Sensor"], "interfaces": ["IMySensorBlock"], "terminal_actions": ["Set up Actions"], "properties": [{"name": "BackExtend", "type": "float", "range": "0.1-50", "units": "meters", "terminal_name": "Back"}, {"name": "FrontExtend", "type": "float", "range": "0.1-50", "units": "meters", "terminal_name": "Front"}, {"name": "LeftExtend", "type": "float", "range": "0.1-50", "units": "meters", "terminal_name": "Left"}, {"name": "RightExtend", "type": "float", "range": "0.1-50", "units": "meters", "terminal_name": "Right"}, {"name": "TopExtend", "type": "float", "range": "0.1-50", "units": "meters", "terminal_name": "Top"}, {"name": "BottomExtend", "type": "float", "range": "0.1-50", "units": "meters", "terminal_name": "Bottom"}, {"name": "DetectPlayers", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Players"}, {"name": "DetectFloatingObjects", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Floating Objects"}, {"name": "DetectSmallShips", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Small Ships"}, {"name": "DetectLargeShips", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Large Ships"}, {"name": "DetectStations", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Stations"}, {"name": "DetectAsteroids", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Asteroids"}, {"name": "DetectOwner", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Owner"}, {"name": "DetectFriendly", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Friendly"}, {"name": "DetectNeutral", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Neutral"}, {"name": "DetectEnemy", "type": "bool", "range": "true|false", "units": "none", "terminal_name": "Detect Enemy"}], "commands": [{"syntax": "Set up Actions", "parameters": ["enter_action", "leave_action"], "example": "Configure actions for target entering and leaving detection range"}, {"syntax": "Show sensors field range", "parameters": [], "example": "Enable in Info Screen to visualize detection area"}], "automation_patterns": [{"pattern": "Proximity Automation", "blocks_required": ["Sensor", "Timer Block"], "setup": ["Configure detection range (6 directional extends)", "Set detection filters for target types", "Configure enter/leave actions", "Use Timer Blocks for complex action sequences"], "toolbar_actions": ["Set up Actions"]}, {"pattern": "Security System", "blocks_required": ["Sensor", "Lights", "Doors", "Turrets"], "setup": ["Detect enemy players/ships", "Trigger security lights and alarms", "Close security doors", "Enable defensive turrets"], "toolbar_actions": ["Set up Actions"]}, {"pattern": "Damage Detection", "blocks_required": ["Sensor", "Warning Lights"], "setup": ["Position sensors to cover ship sections", "Set to detect floating objects (scrap metal)", "Trigger warning lights when damage detected", "Cover critical areas like engines, weapons"], "toolbar_actions": ["Set up Actions"]}], "constraints": {"grid_types": ["small", "large", "station"], "environment": ["space", "atmosphere", "planet"], "power_consumption_mw": 0.001, "pcu_cost": 25, "dependencies": ["power_supply"], "limits": {"max_range_m": 50, "max_speed_ms": 0, "instruction_cost": 0}}, "validation_rules": ["Detection range: 0.1m minimum, 50m maximum in each direction", "Players in cockpits/seats NOT detected", "Detects: players on foot, ships, floating objects, asteroids", "Faction filtering: owner, friendly, neutral, enemy", "Two action slots: enter range, leave range", "Up to 9 toolbar pages for multiple actions", "Status lights: Red=off, Green=ready, Blue=detecting"], "common_failures": [{"error": "Not detecting players", "cause": "Players seated in cockpits/chairs", "solution": "Players must be on foot or jetpacking to be detected"}, {"error": "False damage detection", "cause": "Detecting normal floating objects", "solution": "Position sensors away from normal cargo/mining areas"}, {"error": "Sensor not triggering", "cause": "Wrong detection filters or range settings", "solution": "Check target type filters and expand detection range if needed"}], "sources": [{"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-001.md", "sections": ["Usage", "Range Setup", "Detection Types"]}, {"type": "SEWiki", "path": "docs_chunked(SEWiki)/Utility/Sensor__part-002.md", "sections": ["Actions", "Damage Detection"]}, {"type": "ModAPI", "path": "docs_chunked(ModAPI)/Blocks/IMySensorBlock.md", "sections": ["Properties", "Detection Settings"]}], "tags": ["sensor", "proximity", "detection", "range", "players", "ships", "floating_objects", "security"], "version": {"schema": "1.0", "created": "2024-01-19", "completeness": "complete"}}